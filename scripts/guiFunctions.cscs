function onException(sender, errorMsg, arg) {
  MessageBox("Exception in " + sender + ": " + errorMsg, title, "OK", "error");
}

function worker(count, cycles) {
  for (i = 0; i < count; i++) {
    x = 2*2*4*5*6;
    if (i % cycles  == 0) {
      RunOnMain("SetText", myNewButton, "Loop: " + i);
    }
  }
  return count;
}

function workDone(sender, load) {
   SetText(myNewButton, "Done. Loops: " + load);
}

function myNewButton@Clicked(sender, load) {
   SetText(sender, "Working...");
   AsyncCall("worker", "workDone", 100000, 10000);
}

DEFINE myname type a size 4 init "ENZO";
DEFINE var1 type a size 10 init "123456789012345";
//var1 = "asdasd";

// cfunction fillGridRow(int a) {
//     array0[a] = int(a);
//     array1[a] = int(a*2);
//     array2[a] = int(a*3);
// }
// cfunction loadData(int n) {
//     for (i = 0 ; i < n ; i++) {
//         //if(i == 0){
//         //    fillGridRow(n-1);
//         //}
//         fillGridRow(i); 
//     }
//     return n;
// }

counter1 = 0;
define array0, array1, array2 type i size 9 array 32000; 

function fillDataGrid(){
    cntr2 = rows = 32000;
    start = pstime;
    //fillGridRow(rows - 1);
    loadData(rows);

    DISPLAYARR grid1 LINECOUNTER "cntr1" MAXELEMENTS "cntr2" ACTUALELEMENTS "cntr3" SETUP;
    total = pstime-start;

    MessageBox("End. " + rows + " rows added in " + total + " ms.");
}

function Test_OnDisplay(sender, load) {
    DEFINE variable type n size 1 array 3;//this should define a one-dimensional array with 3 elements
    //initialization
    variable[0] = 1;
    variable[1] = 2;
    variable[2] = 3;
    //define var1 type a size 10 init "123456789012345";
    //var1 = "asdasd";
    //return;

    fillDataGrid();
}

// cfunction testFunction(int a) {
//     array0[a] = string(a);
//     array1[a] = string(a*2);
//     array2[a] = string(a*3);
// }

function grid1@Add(sender, load) {
    canAdd = cntr3 < cntr2;
    MessageBox("Adding " + sender + ": " + load + ", actual: " + cntr3 + ", max: " + cntr2 + ", canAdd=" + canAdd);
    return canAdd;
}
function enzo@svasta(){
}
function grid1@Select(sender, load) {
    MessageBox("Selected for " + sender + ": " + load);
}
function grid1@Header(sender, load) {
    MessageBox("Header for " + sender + ": " + load);
}
function grid1@Move(sender, load) {
    MessageBox("Selected row for " + sender + ": " + load);
}
counter = 0;

function batun@clicked(sender, load) {
    MessageBox("cntr3 = " + cntr3);
    counter++;
    if (counter % 2 == 0) {
      DISPLAYARR grid1 CLOSE;
      return;
    }

    grid1[0] = "lala i";
    grid1[1] = "lala i*2";
    grid1[2] = "lala i*3";
    cntr2 = rows = 32000;

    start = pstime;
    testFunction(rows - 1);
    loadData(rows);
    DISPLAYARR grid1 LINECOUNTER "cntr1" MAXELEMENTS "cntr2" ACTUALELEMENTS "cntr3" SETUP;   
    
    total = pstime-start;
    MessageBox(rows + " rows added in " + total + " process ms.");
}

function testbut@clicked(sender, load) {
    MessageBox("array1[4] = [" + array1[4] + "], actual cntr3=" + cntr3 +
     ", curr cntr1=" + cntr1+ ",max cntr2="+cntr2);

    //DATA_GRID "grid1" GOEDIT;
    //DATA_GRID "grid1" INSERTROW;
    //cntr1 = 2;
    //cntr2 = 100;
    grid1[0] = "lala i";
    grid1[1] = "lala i*2";
    grid1[2] = "lala i*3";
    counter++;
    if (counter % 3 == 0) {
        DISPLAYARR grid1 REDISPLAYFROMEND;
    } elif (counter % 3 == 1) {
        DISPLAYARR grid1 REDISPLAYFROMTOP;
    } else {
        DISPLAYARR grid1 REDISPLAYCURRENT ;
    }
}

function button1@Clicked(sender, load) {
  if (!refresh) {
    return;
  }
  //name123 = "blah";
  define name123 type a size 40 up;
  data = OpenFile();
  SetText(answerLabel, "Open: " + data);
  SetImage("button1", data);
  SetImage("label1", data);
  SetImage("imageWidget", data);
  //SetText("textBox1", data);
}

function button2@Clicked(sender, load) {
  if (!refresh) {
    return;
  }
  text = GetText("textBox1");
  data = SaveFile(text);
  SetText(answerLabel, "Save: " + data);
}

function Window1Button@Clicked(sender, load) {
  fillMenus@Clicked(sender, load);
}
function Window2Button@Clicked(sender, load) {
  Window4Button@Clicked(sender, load);
}
function Window3Button@Clicked(sender, load) {
  Window4Button@Clicked(sender, load);
}
function Window4Button@Clicked(sender, load) {
  //result = MessageBox("Hello from " + sender, title, "OK", "info");
  Window4Button="lala";
  Window4Box="lulu";
}

function Window4_OnOpen(sender, load) {
  //result = MessageBox("Window " + sender + " is opening", title, "OK", "info");
}
function Window4_OnStart(sender, load) {
  //result = MessageBox("Window " + sender + " is starting", title, "OK", "info");
}
function Window4_OnDisplay(sender, load) {
  //result = MessageBox("Window " + sender + " is displaying", title, "OK", "info");
}
function Window4_OnClosing(sender, load) {
  result = MessageBox("Do you want to close this window?", title, "YesNo", "info");
  return result != "Yes";
}
function Window4_OnClose(sender, load) {
  //result = MessageBox("Window " + sender + " is closing", title, "OK", "info");
}

function button3@Clicked(sender, load) {
  if (!refresh) {
    return;
  }
  MessageBox(datePicker);
  //result = MessageBox("Are you happy?", title, "YesNoCancel", "question");
  //SetText(answerLabel, "MessageBox result: " + result);
  //SetText("button8", result);
}
function button4@Clicked(sender, load) {
  if (!refresh) {
    return;
  }
  argb = PickColor();
  SetForegroundColor(sender, argb);
}

function button5@Clicked(sender, load) {
  if (!refresh) {
    return;
  }
  newWidgets++;
  name = "tabPage2.newbutton" + newWidgets;
  text = "New Button" + newWidgets;
  AddWidget(name, "button", text, x, y, width, height, "newButton");
  x += 100;
}

function button6@Clicked(sender, load) {
  if (!refresh) {
    return;
  }
  if (newWidgets <= 0) {
    return;
  }
  RemoveWidget("tabPage2.newbutton" + newWidgets);
  x -= 100;
  newWidgets--;
}

function button7@Clicked(sender, load) {
  if (!refresh) {
    return;
  }
  if (showCounter % 2 == 1) {
	ShowWidget("button6");
  } else {
	HideWidget("button6");
  }
  showCounter++;
}

function button8@Clicked(sender, load) {
  if (!refresh) {
    return;
  }
  CHAIN "WpfCSCS.exe" "../MainWindow.xaml" NEWRUNTIME WITH "myGrid" "bla1"+"bla2" "bla3"    "bla4";
}

function button8@PreClicked(sender, load) {
  if (!refresh) {
    return;
  }
  SetText(answerLabel, sender + " pre clicked");
}

function button9@Clicked(sender, load) {
  if (!refresh) {
    return;
  }
  text = GetText("textBox2");
  if (text == "") {
    return;
  }
  comboItems.Add(text);
  AddWidgetData(comboBox1, text);
  SetText("comboBox1", text);
}

function datePicker@DateChanged(sender, load) {
  if (!refresh) {
    return;
  }
  //MessageBox("Date changed: " + load, title, "OK", "info");
}
function getDate@Clicked(sender, load) {
  if (!refresh) {
    return;
  }
  date = GetText("datePicker");
  setText("textbox1", date);
}

function editEntry(sender, load) {
  MessageBox("Edit Entry", title, "OK", "Info");
}
function aboutEntry(sender, load) {
  MessageBox("This is my great App.", title, "OK", "Info");
}
function exitEntry(sender, load) {
  result = MessageBox("Are you sure you want to exit?", title, "YesNo", "question");
  if (result == "Yes")
  {
    exit();
  }
}

function startWindow2(sender, load) {
    CHAIN "drugiProgram.cscs" WITH "argument1" "argument2" "argument3" "argument4";
}

clicks = 0;
function fillMenus@Clicked(sender, load) {
  mainMenu = sender == "fillMenus" ? "mainMenu" : "mainMenu1";

  RemoveMenu(mainMenu);

  AddMenuItem(mainMenu, "fileMenu", "File");
  AddMenuItem(mainMenu, "windowsMenu", "Windows");
  AddMenuItem(mainMenu, "helpMenu", "Help");

  AddMenuItem("fileMenu", "edit", "Edit", "editEntry");
  AddMenuItem("fileMenu", "close", "Close");
  AddMenuSeparator("fileMenu");
  AddMenuItem("fileMenu", "exit", "Exit", "exitEntry");

  AddMenuItem("windowsMenu", "openWindowsMenu", "Open Windows");
  AddMenuItem("openWindowsMenu", "Window1");
  AddMenuItem("openWindowsMenu", "Window2", "Window2", "startWindow2");
  AddMenuItem("openWindowsMenu", "Window3");

  AddMenuItem("helpMenu", "topics", "Topics");
  AddMenuSeparator("helpMenu");
  AddMenuItem("helpMenu", "about", "About", "aboutEntry");

  datePicker="2020/05/09";

  fillMenus = "Fill Menus " + (++clicks);
}

function setDate@Clicked(sender, load) {
  if (!refresh) {
    return;
  }
  date = GetText("textbox1");
  setText("datePicker", date);
}

function button10@Clicked(sender, load) {
  if (!refresh) {
    return;
  }
  text = GetText("textBox3");
  if (text == "") {
    return;
  }
  AddTab(text);
}

function button11@Clicked(sender, load) {
  if (!refresh) {
    return;
  }
  text = GetText("textBox3");
  if (text == "") {
    return;
  }
  RemoveTab(text);
}

function buttonAddData@Clicked(sender, load) {
  if (!refresh) {
    return;
  }
  data  = {GetText("textName").Trim(), GetText("textSalary").Trim(), GetText("textEmail").Trim()};
  if (data[0] == "" || data[1] == "" || data[2] == "") {
    MessageBox("Please fill out all fields", title, "OK", "warning");
	return;
  }
  try {
    result = SQLInsert("Users", "Name,Salary,Email", data);
	MessageBox("Inserted " + result + " row(s).", title, "OK", "info");
    buttonRefresh@Clicked(sender, "");
  } catch (exc) {
    MessageBox(exc, title, "Cancel", "error");
  }
}

function button13@Clicked(sender, load) {
  if (!refresh) {
    return;
  }
  //MessageBox("123123123123123");

  BindSQL("myGrid", "SY_TABLES");

  //query = "SELECT TOP 15 * FROM SY_TABLES ";
  //print(SQLQuery(query));
}
function buttonReload@Clicked(sender, load) {
  if (!refresh) {
    return;
  }
  NamesArray = {"John", "Frank", "John", "Lulu" };
  SurnamesArray = { "Mayer", "Zappa", "Fogerty", "Perez"};
  EmployedArray = { true, false, false, true};

  FillOutGrid("gridNewContext", NamesArray, SurnamesArray, EmployedArray);
}
function buttonReloadFromDB@Clicked(sender, load) {
  if (!refresh) {
    return;
  }

  FillOutGridFromDB("gridNewContext", "USERS");
}
function checkVat@Clicked(sender, load) {
  if (!refresh) {
    return;
  }
  country = GetText("combobox1");
  code = GetText("textbox1");

  valid   = CheckVATNumber(code, country);
  name    = GetVATName(code, country);
  address = GetVATAddress(code, country);
  print("checkVat: " + code + " " + country + ": " + valid + " (" + name + ", " + address + ")");

  if (valid) {
    SetText("vatStatus", name);
    SetText("vatAddress", address);
    SetForegroundColor("vatStatus", "green");
    SetForegroundColor("vatAddress", "green");
  } else {
    SetText("vatStatus", "Not validated");
    SetText("vatAddress", name);
    SetForegroundColor("vatStatus", "red");
    SetForegroundColor("vatAddress", "red");
  }
}

function newWindow@Clicked(sender, load) {
  MessageBox("asdasdasds");
  if (!refresh) {
    return;
  }
  windowName = GetText("textbox1");
  try {
    win = CreateWindow(windowName);
    label1 = "Created window: " + win;
  } catch (exc) {
    MessageBox(exc, title, "OK", "error");
  }
}
function newModalWindow@Clicked(sender, load) {
  if (!refresh) {
    return;
  }
  windowName = GetText("textbox1");
  try {
    win = ModalWindow(windowName);
    label1 = "Created window: " + win;
  } catch (exc) {
    MessageBox(exc, title, "OK", "error");
  }
}
function deleteWindow@Clicked(sender, load) {
  if (!refresh) {
    return;
  }
  windowName = GetText("textbox1");
  try {
    win = CloseWindow(windowName);
    label1 = "Deleted window: " + win;
  } catch (exc) {
    MessageBox(exc, title, "OK", "error");
  }
}
function showWindow@Clicked(sender, load) {
  if (!refresh) {
    return;
  }
  windowName = GetText("textbox1");
  try {
    win = ShowWindow(windowName);
    label1 = "Showed window: " + win;
  } catch (exc) {
    MessageBox(exc, title, "OK", "error");
  }
}
function hideWindow@Clicked(sender, load) {
  if (!refresh) {
    return;
  }
  windowName = GetText("textbox1");
  try {
    win = HideWindow(windowName);
    label1 = "Hided window: " + win;
  } catch (exc) {
    MessageBox(exc, title, "OK", "error");
  }
}
function nextWindow@Clicked(sender, load) {
  if (!refresh) {
    return;
  }
  NextWindow();
}
function button15@Clicked(sender, load) {
  if (!refresh) {
    return;
  }
  print("0. CHAIN, TOTAL_A exists: " + NameExists(TOTAL_A));

  CHAIN "printPlugin.cscs" WITH "myGrid" "bla1"+"bla2" "bla3" "bla4";

  print("1. CHAIN, TOTAL_A exists: " + NameExists(TOTAL_A));
}

function buttonDeleteData@Clicked(sender, load) {
  if (!refresh) {
    return;
  }
  selected = GetSelected("myGrid");
  if (selected.Size == 0) {
    MessageBox("Nothing has been selected.", title, "OK", "warning");
	return;
  }
  deleted = 0;
  for (row : selected) {
    deleted += SQLNonQuery("Delete from Users where id=" + row);
  }
  MessageBox("Deleted " + deleted + " row(s).", title, "OK", "info");
  buttonRefresh@Clicked(sender, "");
}

clicks = 0;
function button18@Clicked(sender, load) {
  if (!refresh) {
    return;
  }
  MessageBox("Current label value: [" + label1 + "]", title, "OK", "Info");
  ++clicks;
  textbox1 = "My Clicks: " + clicks;
  button18 = "Clicks: " + clicks;
  label1 = "Clicks: " + clicks;
  myLabel = "Whatever label...";
  combobox1 = "seis";
  checkbox1 = False;
}

function label1@PreClicked(sender, load) {
  if (!refresh) {
    return;
  }
  label1 = "I am pre-clicked!";
}
function label1@PostClicked(sender, load) {
  if (!refresh) {
    return;
  }
  label1 = "I am post-clicked!";
}

function label1@DoubleClicked(sender, load) {
  if (!refresh) {
    return;
  }
  SetText(answerLabel, sender + ": I am double clicked");
}

function button9@MouseHover(sender, load) {
  if (!refresh) {
    return;
  }
  SetText(answerLabel, sender + ": MouseHover Here!!!");
}

function textbox2@KeyPress(sender, load) {
  if (!refresh) {
    return;
  }
  SetText(answerLabel, sender + " pressed: " + load);
}
function textbox1@TextChange(sender, load) {
  if (!refresh) {
    return;
  }
  //ChangeCursor("busy");
  text = GetText(sender);
  for (item : comboItems) {
    if (item.StartsWith(text)) {
	  SetText("comboBox1", item);
	  break;
	}
  }
  //ChangeCursor("ok");
}

function newButton@Clicked(sender, load) {
  text = sender + " clicked";
  SetText("label2", text);
}

function combobox1@Clicked(sender, load) {
  if (!refresh) {
    return;
  }
  if (!makeSense) {
    return;
  }
}

function combobox1@PreClicked(sender, load) {
  if (!refresh) {
    return;
  }
   SetText(answerLabel, sender + " pre-clicked: " + load);
}

function checkBox1@Clicked(sender, load) {
	refresh = load;
	if (refresh) {
	  SetText(answerLabel, sender + " Is True!");
	} else {
	  SetText(answerLabel, sender + " Is False!");
	}
}

function populateListView(data) {
  SetWidgetOptions("myGrid", "clear");

  for (i = 1; i < data.Size; i++) {
    AddWidgetData(myGrid, data[i]);
	//SetText(answerLabel, data[i][2]);
  }
}

// add_comp_namespace("using System.Diagnostics");
// add_comp_definition("int m_counter = 10");
// csfunction csharpCode(sender, load) {
//     int a = 10;
//     int b = 20;
//     int c = a + b;
//     Console.WriteLine("c=" + c);

//     Stopwatch x = new Stopwatch();

//     m_counter++;
//     string widgetName = "textbox1";
//     string text = "lala" + m_counter;

//     var widget = CSCS_GUI.GetWidget(widgetName);
//     SetTextWidgetFunction.SetText(widget, text);

//     Interpreter.Instance.AddGlobal("counter", new GetVarFunction(new Variable(m_counter)));

//     Variable cscsVariable = Utils.GetVariable("cscsVariable");
//     Console.WriteLine("cscsVariable=" + cscsVariable.AsString());
// }

cscsVariable = "someValue";

function precompiled@Clicked(sender, load) {  
  csharpCode(sender, load);
  print("counter=" + counter);
}
