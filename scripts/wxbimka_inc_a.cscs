function wxbimkaa_onStart()
{
    cursor("wait");
    // t10datrac=true;
    
    // setChartByDaysOfMonth();
    // //

    comboItems = {" <= 0", " < 0", " = 0"};
    AddWidgetData("comboBoxNaNuli", comboItems);
    SetWidgetOptions("comboBoxNaNuli", "SelectedIndex", 0);


    Chart("ChartPoMjesecima", "init");
    //Chart("ChartPoMjesecima", "seriesType", "Columnseries");
    //Chart("ChartPoMjesecima", "title", "Naslov grafa", 20);
    Chart("ChartPoMjesecima", "values", "bar", ProsjecneZalihePoMjesecima, "Prosječne zalihe"); // !
    Chart("ChartPoMjesecima", "values", "line", IzlazZalihaPoMjesecima, "Izlaz zaliha"); // !
    Chart("ChartPoMjesecima", "values", "line", UlazZalihaPoMjesecima, "Ulaz zaliha"); // !
    // Chart("ChartPoMjesecima", "values", "bar", arrayTrenutna, STRING(ovagod_h)); //!
    Chart("ChartPoMjesecima", "SeparatorStep", 1);
    //Chart("ChartPoMjesecima", "Margins", {50, 20, 0, 30});
    Chart("ChartPoMjesecima", "TooltipDecimalPlaces", 0);
    Chart("ChartPoMjesecima", "Color.Series", { "#488A99", "red", "limegreen"}); 
    Chart("ChartPoMjesecima", "xlabelsRotation", 90);
    Chart("ChartPoMjesecima", "labels", "x", 13, ZalihePoMjesecimaLabels);


    //SetDaysOnZero();

    // //
    // Chart("ChartPoDanima", "init");
    // //Chart("ChartPoDanima", "seriesType", "lineSeries");
    // Chart("ChartPoDanima", "title", "Po Danima");
    // //Chart("ChartPoDanima", "labels","y", 12);
    // Chart("ChartPoDanima", "labels","x", 12,  {"1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31"});
    // //Chart("ChartPoDanima", "labels", arrayDani);
    // //Chart("ChartPoDanima", "xlabelsRotation", 0);
    // Chart("ChartPoDanima", "SeparatorStep", 1);
    // Chart("ChartPoDanima", "values", "line", arrayVrijednosti, "Dnevno");
    // Chart("ChartPoDanima", "values", "line", arrayAvr, "Prosjek7dana");
    // Chart("ChartPoDanima", "Color.Series", { "#DBAE58", "#000000"}); 
    // //Chart("ChartPoDanima", "Margins", {60, 20, 0, 30});
    // //

    // cntr2= 0;

    // setLast10InvoicesDataGrid();
    // Format("T10IZNOSZ_AR", "nofd");
    // Format("T10IZNOSMJ_AR", "nofd");
    // DisplayArray("dgRacuniLast", "close");
    // DisplayArraySetup("dgRacuniLast", counterFld: cntr2, activeElements: Size(sqlResult2) - 1, maxElements: 10);
    // //

	// DisplayArray("dgRacuniMjesec", "close");
	// //DisplayArraySetup("dgRacuniMjesec", counterFld: "cntr3", activeElements: Size(sqlResult) - 1, maxElements: 10);
    // setTop10InvoicesDataGrid();
    // cntr3= 0;
	// DisplayArraySetup("dgRacuniMjesec", counterFld: cntr3, activeElements: Size(sqlResult) - 1, maxElements: 10);
    
    
    cursor("dflt");
}

function comboBoxNaNuli@SelectionChanged()
{
    SetDaysOnZero();
}

function setChartByMonth()
{
    RunOnMain("setChartByMonth0");

    // prošla godina prosjecne zalihe po mjesecima
    // SQL_str = "SET query_governor_cost_limit 0;";
    if ( proslaGodinaBaza != "" )
    {
        sql_str = "WITH promet AS(";
        sql_str += " SELECT rmpr_datum_dok,";

        if (prodajna_dn)
        {
            sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'U' THEN round(rmpr_cena_obr, 2) ELSE -round(rmpr_cena_obr, 2) END), 2), 0) AS transaction_amount";
        }
        elif (nabavna_dn)
        {
            sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'U' THEN round(rmpr_cena_uk, 2) ELSE -round(rmpr_cena_uk, 2) END), 2), 0) AS transaction_amount";
        }
        elif (razlikaUCijeni_dn)
        {
            sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'U' THEN round(rmpr_cena_obr - rmpr_cena_uk, 2) ELSE -round(rmpr_cena_obr - rmpr_cena_uk, 2) END), 2), 0) AS transaction_amount";
        }
        elif (tezina_dn)
        {
            sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'U' THEN round(rmpr_tezina, 2) ELSE -round(rmpr_tezina, 2) END), 2), 0) AS transaction_amount";
        }
        elif (mx3_dn)
        {
            sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'U' THEN round(rmpr_metx3, 2) ELSE -round(rmpr_metx3, 2) END), 2), 0) AS transaction_amount";
        }
        elif (mx2_dn)
        {
            sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'U' THEN round(rmpr_metx2, 2) ELSE -round(rmpr_metx2, 2) END), 2), 0) AS transaction_amount";
        }
        elif (met_dn)
        {
            sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'U' THEN round(rmpr_met, 2) ELSE -round(rmpr_met, 2) END), 2), 0) AS transaction_amount";
        }
        elif (kom_dn)
        {
            sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'U' THEN round(rmpr_komada, 2) ELSE -round(rmpr_komada, 2) END), 2), 0) AS transaction_amount";
        }

        sql_str += " FROM " + proslaGodinaBaza + ".dbo.NKMKPROM";
        sql_str += " LEFT JOIN " + proslaGodinaBaza + ".dbo.NKMKARTI ON RMPR_ARTIKL = ARTI_ARTIKL";

        sql_str += " WHERE year(rmpr_datum_dok) = " + lani_h;
        filterPart();

        sql_str += " GROUP BY RMPR_DATUM_DOK),";
        
        sql_str += " sviDani AS(";
        sql_str += " SELECT convert(date, DATEADD(DAY,number,'" + lani_h + "-01-01')) as datum,";
        sql_str += " ISNULL(transaction_amount, 0) as transaction_amount";
        sql_str += " FROM master..spt_values";
        sql_str += " LEFT JOIN promet on convert(date, DATEADD(DAY,number,'" + lani_h + "-01-01')) = rmpr_datum_dok";
        sql_str += " WHERE type = 'P'";
        sql_str += " AND DATEADD(DAY,number, '" + lani_h + "-01-01') <= '" + lani_h + "-12-31'";
        sql_str += " ),";


        sql_str += " DailyBalance AS (";
        sql_str += " SELECT datum,";
        sql_str += " SUM(transaction_amount) OVER (ORDER BY datum ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cumulative_balance";
        sql_str += " FROM sviDani),";

        sql_str += " MonthlyBalance AS (";
        sql_str += " SELECT DATEADD(month, DATEDIFF(month, 0, datum), 0) AS mjesec,";
        sql_str += " AVG(cumulative_balance) AS monthly_avg_balance";
        sql_str += " FROM DailyBalance";
        sql_str += " GROUP BY DATEADD(month, DATEDIFF(month, 0, datum), 0)";
        sql_str += " )";

        sql_str += " SELECT convert(varchar(7), mjesec, 126),";
        sql_str += " round(monthly_avg_balance, 2)";
        sql_str += " FROM MonthlyBalance";
        sql_str += " ORDER BY mjesec;";

        try
        {
            //SaveFile(sql_str);
            queryResult = sqlquery(SQL_str);
        }
        catch(exc)
        {
            MessageBox(exc);
        }
        
        RunOnMain("setChartByMonth1");
    }
    
    //// tekuća godina prosjecne zalihe po mjesecima
    sql_str = "WITH promet AS(";
    sql_str += " SELECT rmpr_datum_dok,";

    if (prodajna_dn)
    {
        sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'U' THEN round(rmpr_cena_obr, 2) ELSE -round(rmpr_cena_obr, 2) END), 2), 0) AS transaction_amount";
    }
    elif (nabavna_dn)
    {
        sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'U' THEN round(rmpr_cena_uk, 2) ELSE -round(rmpr_cena_uk, 2) END), 2), 0) AS transaction_amount";
    }
    elif (razlikaUCijeni_dn)
    {
        sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'U' THEN round(rmpr_cena_obr - rmpr_cena_uk, 2) ELSE -round(rmpr_cena_obr - rmpr_cena_uk, 2) END), 2), 0) AS transaction_amount";
    }
    elif (tezina_dn)
    {
        sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'U' THEN round(rmpr_tezina, 2) ELSE -round(rmpr_tezina, 2) END), 2), 0) AS transaction_amount";
    }
    elif (mx3_dn)
    {
        sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'U' THEN round(rmpr_metx3, 2) ELSE -round(rmpr_metx3, 2) END), 2), 0) AS transaction_amount";
    }
    elif (mx2_dn)
    {
        sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'U' THEN round(rmpr_metx2, 2) ELSE -round(rmpr_metx2, 2) END), 2), 0) AS transaction_amount";
    }
    elif (met_dn)
    {
        sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'U' THEN round(rmpr_met, 2) ELSE -round(rmpr_met, 2) END), 2), 0) AS transaction_amount";
    }
    elif (kom_dn)
    {
        sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'U' THEN round(rmpr_komada, 2) ELSE -round(rmpr_komada, 2) END), 2), 0) AS transaction_amount";
    }
    
    sql_str += " FROM " + trenutnaGodinaBaza + ".dbo.NKMKPROM";
    sql_str += " LEFT JOIN " + trenutnaGodinaBaza + ".dbo.NKMKARTI ON RMPR_ARTIKL = ARTI_ARTIKL";

    sql_str += " WHERE year(rmpr_datum_dok) = " + ovagod_h;
    filterPart();

    sql_str += " GROUP BY RMPR_DATUM_DOK),";
    
    sql_str += " sviDani AS(";
    sql_str += " SELECT convert(date, DATEADD(DAY,number,'" + ovagod_h + "-01-01')) as datum,";
    sql_str += " ISNULL(transaction_amount, 0) as transaction_amount";
    sql_str += " FROM master..spt_values";
    sql_str += " LEFT JOIN promet on convert(date, DATEADD(DAY,number,'" + ovagod_h + "-01-01')) = rmpr_datum_dok";
    sql_str += " WHERE type = 'P'";
    if(int(ovagod_h) < int(now("yyyy"))){
        doDatum = ovagod_h + "-12-31";
    }else{
        doDatum = now("yyyy-MM-dd");
    }
    sql_str += " AND DATEADD(DAY,number, '" + ovagod_h + "-01-01') <= '" + doDatum + "'";
    sql_str += " ),";


    sql_str += " DailyBalance AS (";
    sql_str += " SELECT datum,";
    sql_str += " SUM(transaction_amount) OVER (ORDER BY datum ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cumulative_balance";
    sql_str += " FROM sviDani),";

    sql_str += " MonthlyBalance AS (";
    sql_str += " SELECT DATEADD(month, DATEDIFF(month, 0, datum), 0) AS mjesec,";
    sql_str += " AVG(cumulative_balance) AS monthly_avg_balance";
    sql_str += " FROM DailyBalance";
    sql_str += " GROUP BY DATEADD(month, DATEDIFF(month, 0, datum), 0)";
    sql_str += " )";

    sql_str += " SELECT convert(varchar(7), mjesec, 126),";
    sql_str += " round(monthly_avg_balance, 2)";
    sql_str += " FROM MonthlyBalance";
    sql_str += " ORDER BY mjesec;";
    
    try
    {
        //SaveFile(sql_str);
        queryResult = sqlquery(SQL_str);
    }
    catch(exc)
    {
        MessageBox(exc);
    }

    RunOnMain("setChartByMonth2");
    
    if ( proslaGodinaBaza != "" )
    {
        //prošla godina U i I
        sql_str = "";
        sql_str += " WITH promet AS(";
        sql_str += " SELECT month(rmpr_datum_dok) as mjesec,";
                
        if (prodajna_dn)
        {
            sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'U' THEN round(rmpr_cena_obr, 2) ELSE 0 END), 2), 0) AS ulaz,";
            sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'I' THEN round(rmpr_cena_obr, 2) ELSE 0 END), 2), 0) AS izlaz";
        }
        elif (nabavna_dn)
        {
            sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'U' THEN round(rmpr_cena_uk, 2) ELSE 0 END), 2), 0) AS ulaz,";
            sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'I' THEN round(rmpr_cena_uk, 2) ELSE 0 END), 2), 0) AS izlaz";
        }
        elif (razlikaUCijeni_dn)
        {
            sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'U' THEN round(rmpr_cena_obr - rmpr_cena_uk, 2) ELSE 0 END), 2), 0) AS ulaz,";
            sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'I' THEN round(rmpr_cena_obr - rmpr_cena_uk, 2) ELSE 0 END), 2), 0) AS izlaz";
        }
        elif (tezina_dn)
        {
            sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'U' THEN round(rmpr_tezina, 2) ELSE 0 END), 2), 0) AS ulaz,";
            sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'I' THEN round(rmpr_tezina, 2) ELSE 0 END), 2), 0) AS izlaz";
        }
        elif (mx3_dn)
        {
            sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'U' THEN round(rmpr_metx3, 2) ELSE 0 END), 2), 0) AS ulaz,";
            sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'I' THEN round(rmpr_metx3, 2) ELSE 0 END), 2), 0) AS izlaz";
        }
        elif (mx2_dn)
        {
            sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'U' THEN round(rmpr_metx2, 2) ELSE 0 END), 2), 0) AS ulaz,";
            sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'I' THEN round(rmpr_metx2, 2) ELSE 0 END), 2), 0) AS izlaz";
        }
        elif (met_dn)
        {
            sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'U' THEN round(rmpr_met, 2) ELSE 0 END), 2), 0) AS ulaz,";
            sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'I' THEN round(rmpr_met, 2) ELSE 0 END), 2), 0) AS izlaz";
        }
        elif (kom_dn)
        {
            sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'U' THEN round(rmpr_komada, 2) ELSE 0 END), 2), 0) AS ulaz,";
            sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'I' THEN round(rmpr_komada, 2) ELSE 0 END), 2), 0) AS izlaz";
        }

        sql_str += " FROM " + proslaGodinaBaza + ".dbo.NKMKPROM";
        sql_str += " LEFT JOIN " + proslaGodinaBaza + ".dbo.NKMKARTI on RMPR_ARTIKL = ARTI_ARTIKL";
        sql_str += " WHERE RMPR_IZVOR_DOK != 'GO' AND year(rmpr_datum_dok) = " + lani_h;
        filterPart();

        sql_str += " GROUP BY month(rmpr_datum_dok)),";

        sql_str += " allMonths AS (";
        sql_str += " SELECT number as mjesec, isnull(ulaz, 0) as ulaz, isnull(izlaz, 0) as izlaz";
        sql_str += " FROM master..spt_values LEFT JOIN promet on number = mjesec";
        sql_str += " WHERE type = 'P'";
        sql_str += " AND number <= 12 AND number > 0";
        
        sql_str += " )";
        sql_str += " SELECT * FROM allMonths";
        sql_str += " order by mjesec";

        try
        {
            //SaveFile(sql_str);
            queryResult = sqlquery(SQL_str);
        }
        catch(exc)
        {
            MessageBox(exc);
        }

        RunOnMain("setChartByMonth3");
    }
    
       
    //trenutna godina U i I
    sql_str = "";
    sql_str += " WITH promet AS(";
    sql_str += " SELECT month(rmpr_datum_dok) as mjesec,";
    
    if (prodajna_dn)
    {
        sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'U' THEN round(rmpr_cena_obr, 2) ELSE 0 END), 2), 0) AS ulaz,";
        sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'I' THEN round(rmpr_cena_obr, 2) ELSE 0 END), 2), 0) AS izlaz";
    }
    elif (nabavna_dn)
    {
        sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'U' THEN round(rmpr_cena_uk, 2) ELSE 0 END), 2), 0) AS ulaz,";
        sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'I' THEN round(rmpr_cena_uk, 2) ELSE 0 END), 2), 0) AS izlaz";
    }
    elif (razlikaUCijeni_dn)
    {
        sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'U' THEN round(rmpr_cena_obr - rmpr_cena_uk, 2) ELSE 0 END), 2), 0) AS ulaz,";
        sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'I' THEN round(rmpr_cena_obr - rmpr_cena_uk, 2) ELSE 0 END), 2), 0) AS izlaz";
    }
    elif (tezina_dn)
    {
        sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'U' THEN round(rmpr_tezina, 2) ELSE 0 END), 2), 0) AS ulaz,";
        sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'I' THEN round(rmpr_tezina, 2) ELSE 0 END), 2), 0) AS izlaz";
    }
    elif (mx3_dn)
    {
        sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'U' THEN round(rmpr_metx3, 2) ELSE 0 END), 2), 0) AS ulaz,";
        sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'I' THEN round(rmpr_metx3, 2) ELSE 0 END), 2), 0) AS izlaz";
    }
    elif (mx2_dn)
    {
        sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'U' THEN round(rmpr_metx2, 2) ELSE 0 END), 2), 0) AS ulaz,";
        sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'I' THEN round(rmpr_metx2, 2) ELSE 0 END), 2), 0) AS izlaz";
    }
    elif (met_dn)
    {
        sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'U' THEN round(rmpr_met, 2) ELSE 0 END), 2), 0) AS ulaz,";
        sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'I' THEN round(rmpr_met, 2) ELSE 0 END), 2), 0) AS izlaz";
    }
    elif (kom_dn)
    {
        sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'U' THEN round(rmpr_komada, 2) ELSE 0 END), 2), 0) AS ulaz,";
        sql_str += " ISNULL(round(SUM(CASE WHEN rmpr_ul_izl = 'I' THEN round(rmpr_komada, 2) ELSE 0 END), 2), 0) AS izlaz";
    }
    
    sql_str += " FROM " + trenutnaGodinaBaza + ".dbo.NKMKPROM";
    sql_str += " LEFT JOIN " + trenutnaGodinaBaza + ".dbo.NKMKARTI on RMPR_ARTIKL = ARTI_ARTIKL";
    sql_str += " WHERE RMPR_IZVOR_DOK != 'GO' AND year(rmpr_datum_dok) = " + ovagod_h;
    filterPart();

    sql_str += " GROUP BY month(rmpr_datum_dok)),";

    sql_str += " allMonths AS (";
    sql_str += " SELECT number as mjesec, isnull(ulaz, 0) as ulaz, isnull(izlaz, 0) as izlaz";
    sql_str += " FROM master..spt_values LEFT JOIN promet on number = mjesec";
    sql_str += " WHERE type = 'P'";
    sql_str += " AND number <= 12 AND number > 0";
    
    sql_str += " )";
    sql_str += " SELECT * FROM allMonths";
    sql_str += " order by mjesec";

    try
    {
        //SaveFile(sql_str);
        queryResult = sqlquery(SQL_str);
    }
    catch(exc)
    {
        MessageBox(exc);
    }

    RunOnMain("setChartByMonth4");
}

//clear array + set labels
function setChartByMonth0(){
    for(i = 0; i < 24; i++)
    {
        ProsjecneZalihePoMjesecima[i] = 0;
        UlazZalihaPoMjesecima[i] = 0;
        IzlazZalihaPoMjesecima[i] = 0;

        if(i < 12){
            ZalihePoMjesecimaLabels[i] = string(i+1) + "./" + lani_h + ".";
        }else{
            ZalihePoMjesecimaLabels[i] = string(i-11) + "./" + ovagod_h + ".";
        }
    }
}


//prosla godina prosječno po mjesecima
function setChartByMonth1(){
    for(i = 1; i <= 12; i++)
    {
        ProsjecneZalihePoMjesecima[i - 1] = queryResult[i][1];
    }
}

//trenutna godina prosječno po mjesecima
function setChartByMonth2(){
    
    for(i = 1; i <= Size(queryResult)-1; i++)
    {
        ProsjecneZalihePoMjesecima[i + 11] = queryResult[i][1];
    }
}

//prosla godina ulaz i izlaz
function setChartByMonth3(){
    for(i = 1; i <= 12; i++)
    {
        UlazZalihaPoMjesecima[i - 1] = queryResult[i][1];
        IzlazZalihaPoMjesecima[i - 1] = queryResult[i][2];
    }
}

//trenutna godina ulaz i izlaz
function setChartByMonth4(){
    
    for(i = 1; i <= Size(queryResult)-1; i++)
    {
        UlazZalihaPoMjesecima[i + 11] = queryResult[i][1];
        IzlazZalihaPoMjesecima[i + 11] = queryResult[i][2];
    }
}

//--------------------------------------------------------

function SetDaysOnZero(){

    for(i = 0; i < 100; i++){
        top100_naNuli_Rbr_ar[i] = 0;
        top100_naNuli_sifraArtikla_ar[i] = "";
        top100_naNuli_nazivArtikla_ar[i] = "";
        top100_naNuli_brojDana_ar[i] = 0;
    }

    if(mjesecOd.length == 1){
        mjesecOdMM = "0" + mjesecOd;
    }
    else{
        mjesecOdMM = mjesecOd;
    }
    if(mjesecDo.length == 1){
        mjesecDoMM = "0" + mjesecDo;
    }else{
        mjesecDoMM = mjesecDo;
    }

    
    // if(int(ovagod_h) = int(now("yyyy")) && int(mjesecDo) >= int(now("MM"))){
    //     daysInMjesecDodd = now("dd");
    //     MMdd = now("MM-dd");
    // }

    daysInMjesecDo = string(DaysInMonth(int(mjesecDo), int(ovagod_h)));

    sql_str = " DECLARE @date_from DATE = '" + ovagod_h + "-" + mjesecOdMM + "-01';";
	
    // if(int(ovagod_h) < int(now("yyyy"))){
    
    sql_str += " DECLARE @date_to DATE = '" + ovagod_h + "-" + mjesecDoMM + "-" + daysInMjesecDo + "';"; // NE 31
    
    // }else{
    //     sql_str += " DECLARE @date_to DATE = '" + now("yyyy-MM-dd") + "';";
    // }

    sql_str += " WITH InventoryBalance AS (";
    sql_str += " SELECT rmpr_artikl, rmpr_datum_dok,";
    sql_str += " SUM(CASE WHEN rmpr_ul_izl = 'U' THEN rmpr_kolicina ELSE -rmpr_kolicina END) AS transaction_amount";

    sql_str += " FROM " + trenutnaGodinaBaza + ".dbo.NKMKPROM";
    sql_str += " LEFT JOIN " + trenutnaGodinaBaza + ".dbo.NKMKARTI ON ARTI_ARTIKL = RMPR_ARTIKL";
    
    sql_str += " WHERE rmpr_kolicina <> 0 AND rmpr_datum_dok BETWEEN @date_from AND @date_to";
    sql_str += " AND arti_tip IN ('R', 'G', 'S')";
    
    filterPart();

    sql_str += " GROUP BY rmpr_artikl, rmpr_datum_dok";
    sql_str += " ),";

    sql_str += " DailyBalance AS (SELECT k.wk_date,";
    sql_str += " ib.rmpr_artikl,";
    sql_str += " COALESCE(SUM(ib.transaction_amount) OVER (PARTITION BY ib.rmpr_artikl ORDER BY k.wk_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 0) AS cumulative_balance";
   
    sql_str += " FROM " + CommonDBGet() + ".dbo.kalendar k";
    sql_str += " LEFT JOIN InventoryBalance ib ON k.wk_date = ib.rmpr_datum_dok";

    sql_str += " WHERE k.wk_date BETWEEN @date_from AND @date_to";

    sql_str += " ),";


    sql_str += " ZeroOrNegativePeriods AS (";
    sql_str += " SELECT rmpr_artikl,";
    sql_str += " wk_date as wkdate,";
    sql_str += " cumulative_balance,";

    switch(NaNuli_cb){
        case " <= 0":
            NaNuliOdabranoSign = "<=";
            break;
        case " < 0":
            NaNuliOdabranoSign = "<";
            break;
        case " = 0":
            NaNuliOdabranoSign = "=";
            break;
    }

    sql_str += " CASE WHEN cumulative_balance " + NaNuliOdabranoSign + " 0 AND COALESCE(LAG(cumulative_balance) OVER (PARTITION BY rmpr_artikl ORDER BY wk_date), 1) > 0 THEN 1 ELSE 0 END AS period_start,";
    sql_str += " CASE WHEN cumulative_balance " + NaNuliOdabranoSign + " 0 AND COALESCE(LEAD(cumulative_balance) OVER (PARTITION BY rmpr_artikl ORDER BY wk_date), 1) > 0 THEN 1 ELSE 0 END AS period_end";
    sql_str += " FROM DailyBalance";
    sql_str += " WHERE rmpr_artikl is not null";
    sql_str += " ),";

    sql_str += " Periods AS (";
    sql_str += " SELECT rmpr_artikl,";
    sql_str += " cumulative_balance,";
    sql_str += " wkdate AS start_date,";
    sql_str += " period_start,";
    sql_str += " period_end,";
    sql_str += " LEAD(wkdate,1, DATEADD(day, 1, @date_to) ) OVER (PARTITION BY rmpr_artikl ORDER BY wkdate asc) AS end_date";
    sql_str += " FROM ZeroOrNegativePeriods";
    sql_str += " ),";

    sql_str += " Periods2 AS (";
    sql_str += " SELECT rmpr_artikl,";
    sql_str += " cumulative_balance,";
    sql_str += " start_date,";
    sql_str += " end_date";
    sql_str += " FROM Periods";
    sql_str += " WHERE start_date is not null AND end_date is not null AND cumulative_balance " + NaNuliOdabranoSign + " 0";
    sql_str += " ),";

    sql_str += " GroupedPeriods AS (";
    sql_str += " SELECT rmpr_artikl,";
    sql_str += " DATEDIFF(DAY, MIN(start_date), MAX(end_date)) AS zero_or_negative_days";
    sql_str += " FROM Periods2";
    sql_str += " GROUP BY rmpr_artikl, start_date";
    sql_str += " )";

    sql_str += " SELECT TOP 100 rmpr_artikl,";
    sql_str += " (SELECT arti_naziv FROM nkmkarti WHERE ARTI_ARTIKL = rmpr_artikl) as nazivArtikla,";
    sql_str += " sum(zero_or_negative_days) as zero_days";
    sql_str += " FROM GroupedPeriods";
    sql_str += " GROUP BY rmpr_artikl";
    sql_str += " ORDER BY sum(zero_or_negative_days) DESC";

    // SaveFile(sql_str);
    try	{
		sqlResult = sqlQuery(sql_str);
	}catch(exc){
		MessageBox(exc);
	}

    for ( i = 1; i < Size(sqlResult); i++ )
    {   
        top100_naNuli_Rbr_ar[i - 1] =  i;   
        top100_naNuli_sifraArtikla_ar[i - 1] =  sqlResult[i][0];
        top100_naNuli_nazivArtikla_ar[i - 1] =  sqlResult[i][1]; 
        top100_naNuli_brojDana_ar[i - 1] =  sqlResult[i][2]; 
    }

    // Format("T10IZNOSZ_AR", "nofd");
    // Format("T10IZNOSMJ_AR", "nofd");
    DisplayArray("dgNaNuli", "close");
    if(Size(sqlResult) - 1 > 0){
        DisplayArraySetup("dgNaNuli", counterFld: cntr2, activeElements: Size(sqlResult) - 1, maxElements: 100);    
    }
}



