function wxbiodab_onDisplay()
{
	cursor("wait");
    t10datrac=true;
    

	// poMjesecimaLabel = "";
    // if(rad_rb)
    // {
    //     if(bruto_rb){
    //         poMjesecimaLabel = "Bruto iznos plaće";
    //     }
    //     elif(neto_rb){
    //         poMjesecimaLabel = "Neto iznos plaće";
    //     }
    //     elif(brojRadnika_rb){
    //         poMjesecimaLabel = "Broj radnika";
    //     }
    // }
    // // elif(bolovanje_rb)
    // // {
    // //     if(bruto_rb){
    // //         poMjesecimaLabel = "Bruto iznos bolovanja";
    // //     }
    // //     elif(neto_rb){
    // //         poMjesecimaLabel = "Neto iznos bolovanja";
    // //     }
    // //     elif(brojRadnika_rb){
    // //         poMjesecimaLabel = "Broj radnika na bolovanju";
    // //     }
    // // }
    // elif(doprinosiIzPlace_rb)
    // {
    //     if(bruto_rb || neto_rb){
    //         poMjesecimaLabel = "Doprinosi iz plaće";
    //     }
    //     elif(brojRadnika_rb){
    //         poMjesecimaLabel = "Broj radnika s doprinosom iz plaće";
    //     }
    // }
    // elif(doprinosiNaPlacu_rb)
    // {
    //     if(bruto_rb || neto_rb){
    //         poMjesecimaLabel = "Doprinosi na plaću";
    //     }
    //     elif(brojRadnika_rb){
    //         poMjesecimaLabel = "Broj radnika s doprinosom na plaću";
    //     }
    // }
    // elif(olaksice_rb)
    // {
    //     if(bruto_rb || neto_rb){
    //         poMjesecimaLabel = "Olakšice";
    //     }
    //     elif(brojRadnika_rb){
    //         poMjesecimaLabel = "Broj radnika s olakšicama";
    //     }
    // }
    // elif(osobniOdbitak_rb)
    // {
    //     if(bruto_rb || neto_rb){
    //         poMjesecimaLabel = "Osobni odbitak";
    //     }
    //     elif(brojRadnika_rb){
    //         poMjesecimaLabel = "Broj radnika s osobnim odbitkom";
    //     }
    // }
    // elif(porez_rb)
    // {
    //     if(bruto_rb || neto_rb){
    //         poMjesecimaLabel = "Porez";
    //     }
    //     elif(brojRadnika_rb){
    //         poMjesecimaLabel = "Broj radnika s porezom";
    //     }
    // }
    // elif(prirez_rb)
    // {
    //     if(bruto_rb || neto_rb){
    //         poMjesecimaLabel = "Prirez";
    //     }
    //     elif(brojRadnika_rb){
    //         poMjesecimaLabel = "Broj radnika s prirezom";
    //     }
    // }
    // elif(naknade_rb)
    // {
    //     if(bruto_rb || neto_rb){
    //         poMjesecimaLabel = "Naknade";
    //     }
    //     elif(brojRadnika_rb){
    //         poMjesecimaLabel = "Broj radnika s naknadama";
    //     }
    // }
    // elif(obustave_rb)
    // {
    //     if(bruto_rb || neto_rb){
    //         poMjesecimaLabel = "Obustave";
    //     }
    //     elif(brojRadnika_rb){
    //         poMjesecimaLabel = "Broj radnika s obustavama";
    //     }
    // }
	poMjesecimaLabel = "";
    if(rad_rb)
    {
        poMjesecimaLabel = " - Plaća";
    }
    // elif(bolovanje_rb)
    // {
    //     if(bruto_rb){
    //         poMjesecimaLabel = "Bruto iznos bolovanja";
    //     }
    //     elif(neto_rb){
    //         poMjesecimaLabel = "Neto iznos bolovanja";
    //     }
    //     elif(brojRadnika_rb){
    //         poMjesecimaLabel = "Broj radnika na bolovanju";
    //     }
    // }
    elif(doprinosiIzPlace_rb)
    {
        poMjesecimaLabel = " - Doprinosi iz plaće";
    }
    elif(doprinosiNaPlacu_rb)
    {
        poMjesecimaLabel = " - Doprinosi na plaću";
    }
    elif(olaksice_rb)
    {
        poMjesecimaLabel = " - Olakšice";
    }
    elif(osobniOdbitak_rb)
    {
        poMjesecimaLabel = " - Osobni odbitak";
    }
    elif(porez_rb)
    {
        poMjesecimaLabel = " - Porez";
    }
    elif(prirez_rb)
    {
        poMjesecimaLabel = " - Prirez";
    }
    elif(naknade_rb)
    {
        poMjesecimaLabel = " - Naknade";
    }
    elif(obustave_rb)
    {
        poMjesecimaLabel = " - Obustave";
    }
    SetWidgetOptions("poMjesecimaLabel", "Content", poMjesecimaLabel);

    comboItems = {"Bruto", "Neto", "Broj radnika"};
    AddWidgetData("comboBoxPoMjesecima", comboItems);
    SetWidgetOptions("comboBoxPoMjesecima", "SelectedIndex", 0);

    //---------------------------

	comboItems = {"Prosječna", "Medijalna"};
    AddWidgetData("comboBoxProsjecnaMedijalna", comboItems);
    SetWidgetOptions("comboBoxProsjecnaMedijalna", "SelectedIndex", 0);

	comboItems = {"Bruto", "Neto"};
    AddWidgetData("comboBoxBrutoNeto", comboItems);
    SetWidgetOptions("comboBoxBrutoNeto", "SelectedIndex", 0);



    setChartByMonth();
    


	setChartByMonth2();
	initChartByMonth2();


    cntr2= 0;
    cntr3= 0;
    setEmployeesDataGrid();

    Format("LstRadnUgovorenaPlaca_ar", "nofd");
    Format("LstRadnPosljPlacaBruto_ar", "nofd");
    Format("LstRadnPosljPlacaNeto_ar", "nofd");
    Format("LstRadnProsjPlacaBruto_ar", "nofd");
    Format("LstRadnProsjPlacaNeto_ar", "nofd");
    DisplayArray("dgRacuniLast", "close");
    // DisplayArraySetup("dgListaZaposlenika", counterFld: cntr2, activeElements: zaposleniciSize, maxElements: zaposleniciSize);
	DisplayArray("dgListaZaposlenika", "close");
	DisplayArraySetup("dgListaZaposlenika", counterFld: "cntr3", activeElements: zaposleniciSize, maxElements: zaposleniciSize);
    
    cursor("dflt");
}

function comboBoxPoMjesecima@SelectionChanged(){
	setChartByMonth();
}

function comboBoxBrutoNeto@SelectionChanged(){
	initChartByMonth2();
}
function comboBoxProsjecnaMedijalna@SelectionChanged(){
	initChartByMonth2();
}

function initChartByMonth2(){
	Chart("ChartPoMjesecima2", "init");
    //Chart("ChartPoMjesecima2", "seriesType", "Columnseries");
    //Chart("ChartPoMjesecima2", "title", "Naslov grafa", 20);
    // Chart("ChartPoMjesecima2", "labels", "y", 13);
    // Chart("ChartPoMjesecima2", "labels", "x", 13, {"1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"});
    // Chart("ChartPoMjesecima2", "xlabelsRotation", 0);
	if(BrutoNeto_cb == "Bruto"){
		if(ProsjecnaMedijalna_cb == "Prosječna"){
			Chart("ChartPoMjesecima2", "values", "bar", arrayProslaBrutoAvg, STRING(int(godina1)-1));
    		Chart("ChartPoMjesecima2", "values", "bar", arrayTrenutnaBrutoAvg, godina1);
		}elif(ProsjecnaMedijalna_cb == "Medijalna"){
			Chart("ChartPoMjesecima2", "values", "bar", arrayProslaBrutoMedian, STRING(int(godina1)-1));
    		Chart("ChartPoMjesecima2", "values", "bar", arrayTrenutnaBrutoMedian, godina1);
		}
	}
	elif(BrutoNeto_cb == "Neto"){
		if(ProsjecnaMedijalna_cb == "Prosječna"){
			Chart("ChartPoMjesecima2", "values", "bar", arrayProslaNetoAvg, STRING(int(godina1)-1));
    		Chart("ChartPoMjesecima2", "values", "bar", arrayTrenutnaNetoAvg, godina1);
		}elif(ProsjecnaMedijalna_cb == "Medijalna"){
			Chart("ChartPoMjesecima2", "values", "bar", arrayProslaNetoMedian, STRING(int(godina1)-1));
    		Chart("ChartPoMjesecima2", "values", "bar", arrayTrenutnaNetoMedian, godina1);
		}
	}
    Chart("ChartPoMjesecima2", "SeparatorStep", 1);
    //Chart("ChartPoMjesecima2", "Margins", {50, 20, 0, 30});
    Chart("ChartPoMjesecima2", "TooltipDecimalPlaces", 0);
    Chart("ChartPoMjesecima2", "Color.Series", { "#ffb703", "#219ebc"}); 

    Chart("ChartPoMjesecima2", "labels", "x", 13, {"1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"});
}

function setChartByMonth()
{
    sql_str = "SELECT TOP 24";
    if(comboBoxMjesec1selected == "Obračun za mjesec"){
        sql_str += " odob_gl_god + CASE WHEN LEN(odob_gl_mjesec) = 1 THEN '0' + odob_gl_mjesec ELSE ODOB_GL_MJESEC END";
    }elif(comboBoxMjesec1selected == "Mjesec isplate plaće"){
        sql_str += " CONVERT(varchar(6), ODOB_GL_DAT_ISP, 112)";
    }elif(comboBoxMjesec1selected == "Mjesec obračuna plaće"){
        sql_str += " CONVERT(varchar(6), ODOB_GL_DATUM, 112)";
    }
    sql_str += " as god_mjesec, ";

    if(poMjesecima_cb == "Neto" && rad_rb == true){
        sql_str += " round(sum(odob_ln_neto), 2)";
    }elif(poMjesecima_cb == "Broj radnika"){
        sql_str += " count(distinct odob_ln_osoba)";
    }else{
        sql_str += " round(sum(odob_ln_iznos), 2)";
    }
    sql_str += " as iznos";

    sql_str += " FROM " + trenutnaGodinaBaza + ".dbo.nkodobgl";
    //sql_str += " LEFT JOIN " + trenutnaGodinaBaza + ".dbo.nkodobos on odob_gl_num = odob_os_num";
	sql_str += " LEFT JOIN " + trenutnaGodinaBaza + ".dbo.nkodobln ON odob_gl_num = odob_ln_num";
	sql_str += " LEFT JOIN " + trenutnaGodinaBaza + ".dbo.nkodradn ON od_ms_br_rad = odob_ln_osoba";

    sql_str += " WHERE "; 
    if(comboBoxMjesec1selected == "Obračun za mjesec"){
        sql_str += " (odob_gl_god = " + godina1 + " OR odob_gl_god = " + string(int(godina1)-1) + ")";
    }elif(comboBoxMjesec1selected == "Mjesec isplate plaće"){
        sql_str += " (year(ODOB_GL_DAT_ISP) = " + godina1 + " OR year(ODOB_GL_DAT_ISP) = " + string(int(godina1)-1) + ")";
    }elif(comboBoxMjesec1selected == "Mjesec obračuna plaće"){
        sql_str += " (year(ODOB_GL_DATUM) = " + godina1 + " OR year(ODOB_GL_DATUM) = " + string(int(godina1)-1) + ")";
    }

    filterPart();
    
    if(comboBoxMjesec1selected == "Obračun za mjesec"){
        sql_str += " GROUP BY odob_gl_god + CASE WHEN LEN(odob_gl_mjesec) = 1 THEN '0' + odob_gl_mjesec ELSE ODOB_GL_MJESEC END";
    }elif(comboBoxMjesec1selected == "Mjesec isplate plaće"){
        sql_str += " GROUP BY CONVERT(varchar(6), ODOB_GL_DAT_ISP, 112)";
    }elif(comboBoxMjesec1selected == "Mjesec obračuna plaće"){
        sql_str += " GROUP BY CONVERT(varchar(6), ODOB_GL_DATUM, 112)";
    }

    sql_str += " ORDER BY god_mjesec DESC";
    try
    {
        //SaveFile(sql_str);
        queryResult = sqlquery(SQL_str);
        //SaveFile(queryResult);
    }
    catch(exc)
    {
        MessageBox(exc);
    }

    RunOnMain("setChartByMonth1");
    RunOnMain("setChartByMonth1_chart");
}

function setChartByMonth1(){
    
    // tot_proslimj_priliv = 0;
    // tot_proslimj_odliv = 0;
    // tot_ovajmj_priliv = 0;
    // tot_ovajmj_odliv = 0;
    // tot_ovagod_priliv = 0;
    // tot_ovagod_odliv = 0;
    // tot_lani_priliv = 0;
    // tot_lani_odliv = 0;

    //cntry= 0;
    //sales_month_ar = {};

    for(i = 0; i < 12; i++)
    {
        arrayProslaIznosi[i]= 0; 
        arrayTrenutnaIznosi[i] = 0;
    }

    for(i = 1; i <= Size(queryResult) - 1; i++)
    {
        ar_mjesec = int(substring(queryResult[i][0], 4, 2));
        ar_godina = string(substring(queryResult[i][0], 0, 4));

        if(ar_godina == godina1){
            arrayTrenutnaIznosi[ar_mjesec - 1] += math.round(queryResult[i][1]);
        }else{
            arrayProslaIznosi[ar_mjesec - 1] += math.round(queryResult[i][1]);
        }

        //tot_place -> godina1
        if (ar_godina == godina1 && ar_mjesec >= int(mjesec1od) && ar_mjesec <= int(mjesec1do))
        {
            tot_place += queryResult[i][1]; 
        }
    }
}

function setChartByMonth1_chart(){
    
    Chart("ChartPoMjesecima", "init");
    //Chart("ChartPoMjesecima", "seriesType", "Columnseries");
    //Chart("ChartPoMjesecima", "title", "Naslov grafa", 20);
    // Chart("ChartPoMjesecima", "labels", "y", 13);
    // Chart("ChartPoMjesecima", "labels", "x", 13, {"1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"});
    // Chart("ChartPoMjesecima", "xlabelsRotation", 0);
    Chart("ChartPoMjesecima", "values", "bar", arrayProslaIznosi, STRING(int(godina1)-1)); // !
    Chart("ChartPoMjesecima", "values", "bar", arrayTrenutnaIznosi, godina1); //!
    Chart("ChartPoMjesecima", "SeparatorStep", 1);
    //Chart("ChartPoMjesecima", "Margins", {50, 20, 0, 30});
    Chart("ChartPoMjesecima", "TooltipDecimalPlaces", 0);
    Chart("ChartPoMjesecima", "Color.Series", { "#ffb703", "#219ebc"}); 
    Chart("ChartPoMjesecima", "labels", "x", 13, {"1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"});
}


function setChartByMonth2()
{
    sql_str = "WITH cte AS(";
    sql_str += " SELECT";
    if(comboBoxMjesec1selected == "Obračun za mjesec"){
        sql_str += " odob_gl_god as godina,";
        sql_str += " CASE WHEN LEN(odob_gl_mjesec) = 1 THEN '0' + odob_gl_mjesec ELSE odob_gl_mjesec END as mjesec,";
    }elif(comboBoxMjesec1selected == "Mjesec isplate plaće"){
        sql_str += " year(ODOB_GL_DAT_ISP) as godina,";
        sql_str += " month(ODOB_GL_DAT_ISP) as mjesec,";
    }elif(comboBoxMjesec1selected == "Mjesec obračuna plaće"){
        sql_str += " year(ODOB_GL_DATUM) as godina,";
        sql_str += " month(ODOB_GL_DATUM) as mjesec,";
    }
    sql_str += " odob_ln_osoba as osoba,";
    
	// sql_str += " round(sum(CASE WHEN odob_ln_vrsta IN ('A', 'C', 'E', 'G') THEN odob_ln_ukupno WHEN odob_ln_vrsta IN ('I') THEN odob_ln_iznos ELSE 0 END), 2) as bruto,";
	// sql_str += " round(sum(CASE WHEN odob_ln_vrsta IN ('A', 'C', 'E', 'G') THEN odob_ln_neto WHEN odob_ln_vrsta IN ('I') THEN odob_ln_iznos ELSE 0 END), 2) as neto";
	sql_str += " round(sum(CASE WHEN odob_ln_vrsta IN ('A', 'C', 'E', 'G') THEN odob_ln_ukupno ELSE 0 END), 2) as bruto,";
	sql_str += " round(sum(CASE WHEN odob_ln_vrsta IN ('A', 'C', 'E', 'G') THEN odob_ln_neto ELSE 0 END), 2) as neto";

    sql_str += " FROM " + trenutnaGodinaBaza + ".dbo.nkodobgl";
    //sql_str += " LEFT JOIN " + trenutnaGodinaBaza + ".dbo.nkodobos on odob_gl_num = odob_os_num";
	sql_str += " LEFT JOIN " + trenutnaGodinaBaza + ".dbo.nkodobln ON odob_gl_num = odob_ln_num";
	sql_str += " LEFT JOIN " + trenutnaGodinaBaza + ".dbo.nkodradn ON od_ms_br_rad = odob_ln_osoba";

    sql_str += " WHERE "; 
    if(comboBoxMjesec1selected == "Obračun za mjesec"){
        sql_str += " (odob_gl_god = " + godina1 + " OR odob_gl_god = " + string(int(godina1)-1) + ")";
    }elif(comboBoxMjesec1selected == "Mjesec isplate plaće"){
        sql_str += " (year(ODOB_GL_DAT_ISP) = " + godina1 + " OR year(ODOB_GL_DAT_ISP) = " + string(int(godina1)-1) + ")";
    }elif(comboBoxMjesec1selected == "Mjesec obračuna plaće"){
        sql_str += " (year(ODOB_GL_DATUM) = " + godina1 + " OR year(ODOB_GL_DATUM) = " + string(int(godina1)-1) + ")";
    }

	// sql_str += " AND odob_ln_vrsta IN ('A', 'C', 'E', 'G', 'I')";
	sql_str += " AND odob_ln_vrsta IN ('A', 'C', 'E', 'G')";

    filterPart(false);
	
    if(comboBoxMjesec1selected == "Obračun za mjesec"){
        sql_str += " GROUP BY odob_gl_god, CASE WHEN LEN(odob_gl_mjesec) = 1 THEN '0' + odob_gl_mjesec ELSE odob_gl_mjesec END, odob_ln_osoba";
    }elif(comboBoxMjesec1selected == "Mjesec isplate plaće"){
        sql_str += " GROUP BY year(ODOB_GL_DAT_ISP), month(ODOB_GL_DAT_ISP), odob_ln_osoba";
    }elif(comboBoxMjesec1selected == "Mjesec obračuna plaće"){
        sql_str += " GROUP BY year(ODOB_GL_DATUM), month(ODOB_GL_DATUM), odob_ln_osoba";
    }

    sql_str += " ), MedianBrutoSalaries AS (";
    sql_str += " SELECT godina, mjesec, bruto,";
    sql_str += " ROW_NUMBER() OVER (PARTITION BY godina, mjesec ORDER BY bruto, osoba) AS RowAsc,";
    sql_str += " ROW_NUMBER() OVER (PARTITION BY godina, mjesec ORDER BY bruto DESC, osoba DESC) AS RowDesc";
    sql_str += " FROM cte";
    sql_str += " where bruto != 0";

    sql_str += " ), MedianNetoSalaries AS (";
    sql_str += " SELECT godina, mjesec, neto,";
    sql_str += " ROW_NUMBER() OVER (PARTITION BY godina, mjesec ORDER BY neto, osoba) AS RowAsc,";
    sql_str += " ROW_NUMBER() OVER (PARTITION BY godina, mjesec ORDER BY neto DESC, osoba DESC) AS RowDesc";
    sql_str += " FROM cte";
    sql_str += " where neto != 0";
    sql_str += " )";

    sql_str += " SELECT x.godina, x.mjesec, brutoAvg, netoAvg, MedianBrutoMonthlySalary, MedianNetoMonthlySalary";
    sql_str += " FROM ";

    sql_str += " (SELECT";
    sql_str += " godina, mjesec, round(avg(bruto), 2) as brutoAvg, round(avg(neto), 2) as netoAvg";
    sql_str += " FROM cte";
    sql_str += " WHERE bruto != 0";
    sql_str += " group by godina, mjesec";
    sql_str += " ) x";
    
	sql_str += " LEFT JOIN";

    sql_str += " (SELECT";
    sql_str += " godina, mjesec, round(AVG(bruto), 2) AS MedianBrutoMonthlySalary";
    sql_str += " FROM MedianBrutoSalaries";
    sql_str += " WHERE RowAsc = RowDesc OR RowAsc + 1 = RowDesc";
    sql_str += " GROUP BY godina, mjesec";
    sql_str += " ) y";
    sql_str += " ON x.godina = y.godina AND x.mjesec = y.mjesec";

    sql_str += " LEFT JOIN";
    
	sql_str += " (SELECT";
	sql_str += " godina, mjesec, round(AVG(neto), 2) AS MedianNetoMonthlySalary";
	sql_str += " FROM MedianNetoSalaries";
	sql_str += " WHERE RowAsc = RowDesc OR RowAsc + 1 = RowDesc";
	sql_str += " GROUP BY godina, mjesec";
	sql_str += " ) z";
	sql_str += " ON x.godina = z.godina AND x.mjesec = z.mjesec";

	sql_str += " ORDER BY x.godina, x.mjesec";

    try
    {
        //SaveFile(sql_str);
        queryResult = sqlquery(SQL_str);
        //SaveFile(queryResult);
    }
    catch(exc)
    {
        MessageBox(exc);
    }

    RunOnMain("setChartByMonth2_1");
}

function setChartByMonth2_1(){
    
    // tot_proslimj_priliv = 0;
    // tot_proslimj_odliv = 0;
    // tot_ovajmj_priliv = 0;
    // tot_ovajmj_odliv = 0;
    // tot_ovagod_priliv = 0;
    // tot_ovagod_odliv = 0;
    // tot_lani_priliv = 0;
    // tot_lani_odliv = 0;

    //cntry= 0;
    //sales_month_ar = {};

    for(i = 0; i < 12; i++)
    {
        arrayProslaBrutoAvg[i]= 0; 
        arrayTrenutnaBrutoAvg[i] = 0;
        arrayProslaNetoAvg[i] = 0;
        arrayTrenutnaNetoAvg[i] = 0;
        arrayProslaBrutoMedian[i] = 0;
        arrayTrenutnaBrutoMedian[i] = 0;
        arrayProslaNetoMedian[i] = 0;
        arrayTrenutnaNetoMedian[i] = 0;
    }

    for(i = 1; i <= Size(queryResult) - 1; i++)
    {
        ar_mjesec = int(queryResult[i][1]);
        ar_godina = string(queryResult[i][0]);

        if(ar_godina == godina1){
            arrayTrenutnaBrutoAvg[ar_mjesec - 1] += math.round(queryResult[i][2]);
            arrayTrenutnaNetoAvg[ar_mjesec - 1] += math.round(queryResult[i][3]);
            arrayTrenutnaBrutoMedian[ar_mjesec - 1] += math.round(queryResult[i][4]);
            arrayTrenutnaNetoMedian[ar_mjesec - 1] += math.round(queryResult[i][5]);
        }else{
			arrayProslaBrutoAvg[ar_mjesec - 1] += math.round(queryResult[i][2]);
            arrayProslaNetoAvg[ar_mjesec - 1] += math.round(queryResult[i][3]);
            arrayProslaBrutoMedian[ar_mjesec - 1] += math.round(queryResult[i][4]);
            arrayProslaNetoMedian[ar_mjesec - 1] += math.round(queryResult[i][5]);
        }

        // //tot_place -> godina1
        // if (ar_godina == godina1 && ar_mjesec >= int(mjesec1od) && ar_mjesec <= int(mjesec1do))
        // {
        //     tot_place += queryResult[i][1]; 
        // }
    }
}

function setEmployeesDataGrid(){
    SQL_str = " select distinct ";
    // SQL_str += " ROW_NUMBER() OVER(ORDER BY ID ASC) AS RowNumber,";
    SQL_str += " OD_MS_BR_RAD as sifraRadnika,";
    SQL_str += " OD_MS_PREZIME as prezime,";
    SQL_str += " OD_MS_IME as ime,";
    SQL_str += " round((SELECT CASE WHEN OD_MS_PLACA != 0 THEN OD_MS_PLACA ELSE od_ms_km_k * (SELECT TOP 1 OD_FK_VRED_BODA from " + trenutnaGodinaBaza + ".dbo.nkodfkin) END), 2) as ugovorenaPlaca, ";
    SQL_str += " OD_MS_SPOL as spol, ";
    SQL_str += " CASE WHEN od_ms_dat_rod = '1900-01-01' THEN 0 WHEN EOMONTH ('" + godina1 + "' + '-01-01', " + mjesec1do + " - 1 ) < od_ms_dat_rod THEN 0 ELSE ((CONVERT(int, CONVERT(char(8), EOMONTH ('" + godina1 + "' + '-01-01', " + mjesec1do + " - 1 ), 112)) - CONVERT(char(10), od_ms_dat_rod, 112)) / 10000) END as godineStarosti, ";
    SQL_str += " OD_MS_GOD_STAZA as radniStazUkupno,";

    SQL_str += " CASE WHEN od_ms_dat_zap = '1900-01-01' THEN 0 ";
    SQL_str += " WHEN OD_MS_DAT_PREST = '1900-01-01' ";
    SQL_str += " THEN (CONVERT(int, CONVERT(char(8), EOMONTH ('" + godina1 + "' + '-01-01', " + mjesec1do + " - 1 ), 112)) - CONVERT(char(10), OD_MS_DAT_ZAP, 112)) / 10000 ";
    SQL_str += " ELSE (CONVERT(int, CONVERT(char(8), od_ms_dat_prest, 112)) - CONVERT(char(10), OD_MS_DAT_ZAP, 112)) / 10000 ";
    SQL_str += " END as radniStazUFirmi, ";

    // if(comboBoxMjesec1selected == "Obračun za mjesec"){
    //     sql_str += " round(isnull((SELECT TOP 1 sum(CASE WHEN odob_ln_vrsta IN ('A', 'C', 'E', 'G') THEN odob_ln_ukupno WHEN odob_ln_vrsta IN ('I') THEN ODOB_LN_IZNOS ELSE 0 END) from " + trenutnaGodinaBaza + ".dbo.nkodobln LEFT JOIN " + trenutnaGodinaBaza + ".dbo.nkodobgl ON ODOB_GL_NUM = ODOB_LN_NUM where ODOB_LN_OSOBA = OD_MS_BR_RAD and ODOB_GL_GOD = '" + godina1 + "' AND convert(int,odob_gl_mjesec) >= " + mjesec1od + " AND convert(int,odob_gl_mjesec) <= " + mjesec1do + " group by ODOB_GL_MJESEC, ODOB_GL_GOD order by convert(int,odob_gl_mjesec) DESC), 0), 2) as posljednjaPlacaBruto,";
    // }elif(comboBoxMjesec1selected == "Mjesec isplate plaće"){
    //     sql_str += " round(isnull((SELECT TOP 1 sum(CASE WHEN odob_ln_vrsta IN ('A', 'C', 'E', 'G') THEN odob_ln_ukupno WHEN odob_ln_vrsta IN ('I') THEN ODOB_LN_IZNOS ELSE 0 END) from " + trenutnaGodinaBaza + ".dbo.nkodobln LEFT JOIN " + trenutnaGodinaBaza + ".dbo.nkodobgl ON ODOB_GL_NUM = ODOB_LN_NUM where ODOB_LN_OSOBA = OD_MS_BR_RAD and year(odob_gl_dat_isp) = " + godina1 + " AND month(odob_gl_dat_isp) >= " + mjesec1od + " AND month(odob_gl_dat_isp) <= " + mjesec1do + " group by month(odob_gl_dat_isp), year(odob_gl_dat_isp) order by month(odob_gl_dat_isp) DESC), 0), 2) as posljednjaPlacaBruto,";
    // }elif(comboBoxMjesec1selected == "Mjesec obračuna plaće"){
    //     sql_str += " round(isnull((SELECT TOP 1 sum(CASE WHEN odob_ln_vrsta IN ('A', 'C', 'E', 'G') THEN odob_ln_ukupno WHEN odob_ln_vrsta IN ('I') THEN ODOB_LN_IZNOS ELSE 0 END) from " + trenutnaGodinaBaza + ".dbo.nkodobln LEFT JOIN " + trenutnaGodinaBaza + ".dbo.nkodobgl ON ODOB_GL_NUM = ODOB_LN_NUM where ODOB_LN_OSOBA = OD_MS_BR_RAD and year(odob_gl_datum) = " + godina1 + " AND month(odob_gl_datum) >= " + mjesec1od + " AND month(odob_gl_datum) <= " + mjesec1do + " group by month(odob_gl_datum), year(odob_gl_datum) order by month(odob_gl_datum) DESC), 0), 2) as posljednjaPlacaBruto,";
    // }
    
    // if(comboBoxMjesec1selected == "Obračun za mjesec"){
    //     sql_str += " round(isnull((SELECT TOP 1 sum(CASE WHEN odob_ln_vrsta IN ('A', 'C', 'E', 'G') THEN odob_ln_neto WHEN odob_ln_vrsta IN ('I') THEN ODOB_LN_neto ELSE 0 END) from " + trenutnaGodinaBaza + ".dbo.nkodobln LEFT JOIN " + trenutnaGodinaBaza + ".dbo.nkodobgl ON ODOB_GL_NUM = ODOB_LN_NUM where ODOB_LN_OSOBA = OD_MS_BR_RAD and ODOB_GL_GOD = '" + godina1 + "' AND convert(int,odob_gl_mjesec) >= " + mjesec1od + " AND convert(int,odob_gl_mjesec) <= " + mjesec1do + " group by ODOB_GL_MJESEC, ODOB_GL_GOD order by convert(int,odob_gl_mjesec) DESC), 0), 2) as posljednjaPlacaBruto,";
    // }elif(comboBoxMjesec1selected == "Mjesec isplate plaće"){
    //     sql_str += " round(isnull((SELECT TOP 1 sum(CASE WHEN odob_ln_vrsta IN ('A', 'C', 'E', 'G') THEN odob_ln_neto WHEN odob_ln_vrsta IN ('I') THEN ODOB_LN_neto ELSE 0 END) from " + trenutnaGodinaBaza + ".dbo.nkodobln LEFT JOIN " + trenutnaGodinaBaza + ".dbo.nkodobgl ON ODOB_GL_NUM = ODOB_LN_NUM where ODOB_LN_OSOBA = OD_MS_BR_RAD and year(odob_gl_dat_isp) = " + godina1 + " AND month(odob_gl_dat_isp) >= " + mjesec1od + " AND month(odob_gl_dat_isp) <= " + mjesec1do + " group by month(odob_gl_dat_isp), year(odob_gl_dat_isp) order by month(odob_gl_dat_isp) DESC), 0), 2) as posljednjaPlacaBruto,";
    // }elif(comboBoxMjesec1selected == "Mjesec obračuna plaće"){
    //     sql_str += " round(isnull((SELECT TOP 1 sum(CASE WHEN odob_ln_vrsta IN ('A', 'C', 'E', 'G') THEN odob_ln_neto WHEN odob_ln_vrsta IN ('I') THEN ODOB_LN_neto ELSE 0 END) from " + trenutnaGodinaBaza + ".dbo.nkodobln LEFT JOIN " + trenutnaGodinaBaza + ".dbo.nkodobgl ON ODOB_GL_NUM = ODOB_LN_NUM where ODOB_LN_OSOBA = OD_MS_BR_RAD and year(odob_gl_datum) = " + godina1 + " AND month(odob_gl_datum) >= " + mjesec1od + " AND month(odob_gl_datum) <= " + mjesec1do + " group by month(odob_gl_datum), year(odob_gl_datum) order by month(odob_gl_datum) DESC), 0), 2) as posljednjaPlacaBruto,";
    // }
        
    if(comboBoxMjesec1selected == "Obračun za mjesec"){
        sql_str += " round(isnull((SELECT TOP 1 sum(CASE WHEN odob_ln_vrsta IN ('A', 'C', 'E', 'G') THEN odob_ln_ukupno ELSE 0 END) from " + trenutnaGodinaBaza + ".dbo.nkodobln LEFT JOIN " + trenutnaGodinaBaza + ".dbo.nkodobgl ON ODOB_GL_NUM = ODOB_LN_NUM where ODOB_LN_OSOBA = OD_MS_BR_RAD and ODOB_GL_GOD = '" + godina1 + "' AND convert(int,odob_gl_mjesec) >= " + mjesec1od + " AND convert(int,odob_gl_mjesec) <= " + mjesec1do + " group by ODOB_GL_MJESEC, ODOB_GL_GOD order by convert(int,odob_gl_mjesec) DESC), 0), 2) as posljednjaPlacaBruto,";
    }elif(comboBoxMjesec1selected == "Mjesec isplate plaće"){
        sql_str += " round(isnull((SELECT TOP 1 sum(CASE WHEN odob_ln_vrsta IN ('A', 'C', 'E', 'G') THEN odob_ln_ukupno ELSE 0 END) from " + trenutnaGodinaBaza + ".dbo.nkodobln LEFT JOIN " + trenutnaGodinaBaza + ".dbo.nkodobgl ON ODOB_GL_NUM = ODOB_LN_NUM where ODOB_LN_OSOBA = OD_MS_BR_RAD and year(odob_gl_dat_isp) = " + godina1 + " AND month(odob_gl_dat_isp) >= " + mjesec1od + " AND month(odob_gl_dat_isp) <= " + mjesec1do + " group by month(odob_gl_dat_isp), year(odob_gl_dat_isp) order by month(odob_gl_dat_isp) DESC), 0), 2) as posljednjaPlacaBruto,";
    }elif(comboBoxMjesec1selected == "Mjesec obračuna plaće"){
        sql_str += " round(isnull((SELECT TOP 1 sum(CASE WHEN odob_ln_vrsta IN ('A', 'C', 'E', 'G') THEN odob_ln_ukupno ELSE 0 END) from " + trenutnaGodinaBaza + ".dbo.nkodobln LEFT JOIN " + trenutnaGodinaBaza + ".dbo.nkodobgl ON ODOB_GL_NUM = ODOB_LN_NUM where ODOB_LN_OSOBA = OD_MS_BR_RAD and year(odob_gl_datum) = " + godina1 + " AND month(odob_gl_datum) >= " + mjesec1od + " AND month(odob_gl_datum) <= " + mjesec1do + " group by month(odob_gl_datum), year(odob_gl_datum) order by month(odob_gl_datum) DESC), 0), 2) as posljednjaPlacaBruto,";
    }
    
    if(comboBoxMjesec1selected == "Obračun za mjesec"){
        sql_str += " round(isnull((SELECT TOP 1 sum(CASE WHEN odob_ln_vrsta IN ('A', 'C', 'E', 'G') THEN odob_ln_neto ELSE 0 END) from " + trenutnaGodinaBaza + ".dbo.nkodobln LEFT JOIN " + trenutnaGodinaBaza + ".dbo.nkodobgl ON ODOB_GL_NUM = ODOB_LN_NUM where ODOB_LN_OSOBA = OD_MS_BR_RAD and ODOB_GL_GOD = '" + godina1 + "' AND convert(int,odob_gl_mjesec) >= " + mjesec1od + " AND convert(int,odob_gl_mjesec) <= " + mjesec1do + " group by ODOB_GL_MJESEC, ODOB_GL_GOD order by convert(int,odob_gl_mjesec) DESC), 0), 2) as posljednjaPlacaBruto,";
    }elif(comboBoxMjesec1selected == "Mjesec isplate plaće"){
        sql_str += " round(isnull((SELECT TOP 1 sum(CASE WHEN odob_ln_vrsta IN ('A', 'C', 'E', 'G') THEN odob_ln_neto ELSE 0 END) from " + trenutnaGodinaBaza + ".dbo.nkodobln LEFT JOIN " + trenutnaGodinaBaza + ".dbo.nkodobgl ON ODOB_GL_NUM = ODOB_LN_NUM where ODOB_LN_OSOBA = OD_MS_BR_RAD and year(odob_gl_dat_isp) = " + godina1 + " AND month(odob_gl_dat_isp) >= " + mjesec1od + " AND month(odob_gl_dat_isp) <= " + mjesec1do + " group by month(odob_gl_dat_isp), year(odob_gl_dat_isp) order by month(odob_gl_dat_isp) DESC), 0), 2) as posljednjaPlacaBruto,";
    }elif(comboBoxMjesec1selected == "Mjesec obračuna plaće"){
        sql_str += " round(isnull((SELECT TOP 1 sum(CASE WHEN odob_ln_vrsta IN ('A', 'C', 'E', 'G') THEN odob_ln_neto ELSE 0 END) from " + trenutnaGodinaBaza + ".dbo.nkodobln LEFT JOIN " + trenutnaGodinaBaza + ".dbo.nkodobgl ON ODOB_GL_NUM = ODOB_LN_NUM where ODOB_LN_OSOBA = OD_MS_BR_RAD and year(odob_gl_datum) = " + godina1 + " AND month(odob_gl_datum) >= " + mjesec1od + " AND month(odob_gl_datum) <= " + mjesec1do + " group by month(odob_gl_datum), year(odob_gl_datum) order by month(odob_gl_datum) DESC), 0), 2) as posljednjaPlacaBruto,";
    }
    
    SQL_str +=" round(isnull((SELECT ";
    SQL_str +=" avg(bruto) from (SELECT ";
    // SQL_str +=" sum(CASE WHEN odob_ln_vrsta IN ('A', 'C', 'E', 'G') THEN odob_ln_ukupno WHEN odob_ln_vrsta IN ('I') THEN ODOB_LN_IZNOS ELSE 0 END) as bruto ";
    SQL_str +=" sum(CASE WHEN odob_ln_vrsta IN ('A', 'C', 'E', 'G') THEN odob_ln_ukupno ELSE 0 END) as bruto ";
    SQL_str +=" from " + trenutnaGodinaBaza + ".dbo.nkodobln ";
    SQL_str +=" LEFT JOIN " + trenutnaGodinaBaza + ".dbo.nkodobgl ON ODOB_GL_NUM = ODOB_LN_NUM ";
    SQL_str +=" where ODOB_LN_OSOBA = OD_MS_BR_RAD ";
    if(comboBoxMjesec1selected == "Obračun za mjesec"){
        SQL_str +=" and ODOB_GL_GOD = '" + godina1 + "' ";
        sql_str += " AND convert(int,odob_gl_mjesec) >= " + mjesec1od + " ";
        sql_str += " AND convert(int,odob_gl_mjesec) <= " + mjesec1do + " ";
        sql_str += " group by convert(int,odob_gl_mjesec), convert(int,odob_gl_god)";
    }elif(comboBoxMjesec1selected == "Mjesec isplate plaće"){
        SQL_str +=" and year(odob_gl_dat_isp) = " + godina1 + " ";
        sql_str += " AND month(odob_gl_dat_isp) >= " + mjesec1od + " ";
        sql_str += " AND month(odob_gl_dat_isp) <= " + mjesec1do + " ";
        sql_str += " group by month(odob_gl_dat_isp), year(odob_gl_dat_isp)";
    }elif(comboBoxMjesec1selected == "Mjesec obračuna plaće"){
        SQL_str +=" and year(odob_gl_datum) = " + godina1 + " ";
        sql_str += " AND month(odob_gl_datum) >= " + mjesec1od + " ";
        sql_str += " AND month(odob_gl_datum) <= " + mjesec1do + " ";
        sql_str += " group by month(odob_gl_datum), year(odob_gl_datum)";
    }
    SQL_str +=" ) x), 0), 2) as prosjecnaPlacaBruto, ";
    
    SQL_str +=" round(isnull((SELECT ";
    SQL_str +=" avg(neto) from (SELECT ";
    // SQL_str +=" sum(CASE WHEN odob_ln_vrsta IN ('A', 'C', 'E', 'G') THEN odob_ln_neto WHEN odob_ln_vrsta IN ('I') THEN ODOB_LN_IZNOS ELSE 0 END) as neto ";
    SQL_str +=" sum(CASE WHEN odob_ln_vrsta IN ('A', 'C', 'E', 'G') THEN odob_ln_neto ELSE 0 END) as neto ";
    SQL_str +=" from " + trenutnaGodinaBaza + ".dbo.nkodobln ";
    SQL_str +=" LEFT JOIN " + trenutnaGodinaBaza + ".dbo.nkodobgl ON ODOB_GL_NUM = ODOB_LN_NUM ";
    SQL_str +=" where ODOB_LN_OSOBA = OD_MS_BR_RAD ";
    if(comboBoxMjesec1selected == "Obračun za mjesec"){
        SQL_str +=" and ODOB_GL_GOD = '" + godina1 + "' ";
        sql_str += " AND convert(int,odob_gl_mjesec) >= " + mjesec1od + " ";
        sql_str += " AND convert(int,odob_gl_mjesec) <= " + mjesec1do + " ";
        sql_str += " group by convert(int,odob_gl_mjesec), convert(int,odob_gl_god)";
    }elif(comboBoxMjesec1selected == "Mjesec isplate plaće"){
        SQL_str +=" and year(odob_gl_dat_isp) = " + godina1 + " ";
        sql_str += " AND month(odob_gl_dat_isp) >= " + mjesec1od + " ";
        sql_str += " AND month(odob_gl_dat_isp) <= " + mjesec1do + " ";
        sql_str += " group by month(odob_gl_dat_isp), year(odob_gl_dat_isp)";
    }elif(comboBoxMjesec1selected == "Mjesec obračuna plaće"){
        SQL_str +=" and year(odob_gl_datum) = " + godina1 + " ";
        sql_str += " AND month(odob_gl_datum) >= " + mjesec1od + " ";
        sql_str += " AND month(odob_gl_datum) <= " + mjesec1do + " ";
        sql_str += " group by month(odob_gl_datum), year(odob_gl_datum)";
    }
    SQL_str +=" ) x), 0), 2) as prosjecnaPlacaNeto, ";

    SQL_str +=" (SELECT isnull((SELECT TOP 1 CASE WHEN trim(NKOD_SF_NAZIV) <> '' THEN trim(NKOD_SF_NAZIV) ELSE NKOD_SF_OPIS1 END FROM " + CommonDBGet() + ".dbo.nkodsifr WHERE NKOD_SF_CODE = OD_MS_SIF_ST_SP AND NKOD_SF_TIP = 'c' ), '')) as strucnaSprema, ";
    SQL_str +=" OD_MS_MJES_STAN as prebivaliste, ";
    SQL_str +=" OD_MS_DRV11 as radnoVrijeme, ";
    SQL_str +=" (SELECT CASE WHEN OD_MS_GO_DO = '1900-01-01' THEN 'Neodređeno' ELSE 'Određeno' END) as ugovorNa ";
    
    sql_str += " FROM " + trenutnaGodinaBaza + ".dbo.nkodobgl";
    //sql_str += " LEFT JOIN " + trenutnaGodinaBaza + ".dbo.nkodobos on odob_gl_num = odob_os_num";
	sql_str += " LEFT JOIN " + trenutnaGodinaBaza + ".dbo.nkodobln ON odob_gl_num = odob_ln_num";
	sql_str += " LEFT JOIN " + trenutnaGodinaBaza + ".dbo.nkodradn ON od_ms_br_rad = odob_ln_osoba";

    sql_str += " WHERE "; 
    if(comboBoxMjesec1selected == "Obračun za mjesec"){
        sql_str += " odob_gl_god = " + godina1;
        sql_str += " AND convert(int, odob_gl_mjesec) >= " + int(mjesec1od) + " AND convert(int, odob_gl_mjesec) <= " + int(mjesec1do);
    }elif(comboBoxMjesec1selected == "Mjesec isplate plaće"){
        sql_str += " year(ODOB_GL_DAT_ISP) = " + godina1;
        sql_str += " AND month(ODOB_GL_DAT_ISP) >= " + int(mjesec1od) + " AND month(ODOB_GL_DAT_ISP) <= " + int(mjesec1do);
    }elif(comboBoxMjesec1selected == "Mjesec obračuna plaće"){
        sql_str += " year(ODOB_GL_DATUM) = " + godina1;
        sql_str += " AND month(ODOB_GL_DATUM) >= " + int(mjesec1od) + " AND month(ODOB_GL_DATUM) <= " + int(mjesec1do);
    }

    filterPart();

    SQL_str +=" ORDER BY OD_MS_BR_RAD";

    //SaveFile(sql_str);
    try	{
		sqlResult = sqlQuery(sql_str);
	}catch(exc){
		MessageBox(exc);
	}

    zaposleniciSize = size(sqlresult) - 1;

    setEmployeesDataGridArrays();
}

function setEmployeesDataGridArrays(){
	for ( i = 0; i < cntr3; i++ )
	{
		LstRadnRbr_ar[i] =  0;
		LstRadnSifraRadnika_ar[i] =  "";
		LstRadnPrezime_ar[i] =  "";
		LstRadnIme_ar[i] =  "";
		LstRadnUgovorenaPlaca_ar[i] =  0;
		LstRadnSpol_ar[i] =  "";
		LstRadnGodine_ar[i] = 0;
		LstRadnStazUkupno_ar[i] = 0;
		LstRadnStazUFirmi_ar[i] = 0;
		LstRadnPosljPlacaBruto_ar[i] = 0;
		LstRadnPosljPlacaNeto_ar[i] = 0;
		LstRadnProsjPlacaBruto_ar[i] = 0;
		LstRadnProsjPlacaNeto_ar[i] = 0;
		LstRadnStrSprema_ar[i] = "";
		LstRadnPrebivaliste_ar[i] = "";
		LstRadnRadnoVrijeme_ar[i] = 0;
		LstRadnUgovorNa_ar[i] = "";
	}	

	if(Size(sqlResult) > 1)
	{
		for ( i = 1; i < Size(sqlResult); i++ )
		{        
			LstRadnRbr_ar[i - 1] =  i
            LstRadnSifraRadnika_ar[i - 1] =  sqlresult[i][0];
            LstRadnPrezime_ar[i - 1] =  sqlresult[i][1];
            LstRadnIme_ar[i - 1] =  sqlresult[i][2];
            LstRadnUgovorenaPlaca_ar[i - 1] = sqlresult[i][3];
            LstRadnSpol_ar[i - 1] = sqlresult[i][4];
            LstRadnGodine_ar[i - 1] = sqlresult[i][5];
            LstRadnStazUkupno_ar[i - 1] = sqlresult[i][6];
            LstRadnStazUFirmi_ar[i - 1] = sqlresult[i][7];
            LstRadnPosljPlacaBruto_ar[i - 1] = sqlresult[i][8];
            LstRadnPosljPlacaNeto_ar[i - 1] = sqlresult[i][9];
            LstRadnProsjPlacaBruto_ar[i - 1] = sqlresult[i][10];
            LstRadnProsjPlacaNeto_ar[i - 1] = sqlresult[i][11];
            LstRadnStrSprema_ar[i - 1] = trim(sqlresult[i][12]);
            LstRadnPrebivaliste_ar[i - 1] = sqlresult[i][13];
            LstRadnRadnoVrijeme_ar[i - 1] = sqlresult[i][14];
            LstRadnUgovorNa_ar[i - 1] = sqlresult[i][15];   
		} 
	}
}



//----------------------------------------------
//**********************************************

//----------------------------------------------
//**********************************************

//----------------------------------------------
//**********************************************

//----------------------------------------------
//**********************************************

//----------------------------------------------
//**********************************************

//----------------------------------------------
//**********************************************

/*

function cbPieChart@SelectionChanged(){
	if (refreshPie == false)
	{
		return;
	}

	cursor("wait");
	AsyncCall("setRegionPieChart", "setDefaultCursor");
}

function regionPieChartDone(){
	//AsyncCall("setKategPieChart", "kategPieChartDone");
	AsyncCall("setBankPieChart", "BankPieChartDone");
}
function bankPieChartDone(){
	AsyncCall("setTop10Products", "top10ProductsDone");
}
function top10ProductsDone(){
	AsyncCall("setCustomerDataGrid", "setDefaultCursor");
}
function setDefaultCursor(){
	cursor("dflt");
}

*/

/*
function drzaveRB@clicked()
{
	cursor("wait");
	regijeRB= false;
	gradoviRB= false;
	AsyncCall("setRegionPieChart", "setDefaultCursor");
	//setRegionPieChart();
}
function regijeRB@clicked()
{
	drzaveRB= false;
	gradoviRB= false;
	cursor("wait");
	AsyncCall("setRegionPieChart", "setDefaultCursor");
	//setRegionPieChart();
}

function gradoviRB@clicked()
{
	regijeRB= false;
	drzaveRB= false;
	cursor("wait");
	AsyncCall("setRegionPieChart", "setDefaultCursor");
	//setRegionPieChart();
}
*/

/*

function setBankPieChart()
{
		sql_str = "";
        sql_str += " SELECT CASE WHEN num<= 5 THEN kpsy_bnk_ime ELSE 'Ostale' END AS BankaName , round(sum(suma),0) as Origin ";
        sql_str += " FROM (SELECT kpsy_bnk_ime, sum(CASE WHEN kdib_ln_dp =  'P' THEN kdib_ln_iznos ELSE 0 END) AS Suma,";
        sql_str += " ROW_NUMBER() OVER( ORDER BY sum(CASE WHEN kdib_ln_dp =  'P' THEN kdib_ln_iznos ELSE 0 END) DESC ) As Num";
        sql_str += " FROM " + trenutnaGodinaBaza + " .dbo.kpkdibgl";
        sql_str += " LEFT JOIN " + trenutnaGodinaBaza + ".dbo.kpkdibln ON kdib_gl_num = kdib_ln_num";
    	sql_str += " LEFT JOIN " + trenutnaGodinaBaza + ".dbo.nkscpart ON kdib_ln_partner = nksc_partcode";
		sql_str += " LEFT JOIN " + trenutnaGodinaBaza + ".dbo.kpsybank ON kdib_gl_banka= kpsy_bnk_code";
        sql_str += " WHERE kpsy_bnk_blag <> 'D' AND YEAR(kdib_gl_datum)= " + ovagod_h;
        if (do_mjeseca2  )
		{
            sql_str += " AND Month(kdib_gl_datum)<=" + mjesec_h;
		}	
        else
		{
            sql_str += " AND Month(kdib_gl_datum)=" + mjesec_h;
		}	
        filterPart();
        sql_str += " GROUP BY kpsy_bnk_ime) t";
        sql_str += " GROUP BY CASE WHEN num <= 5 THEN kpsy_bnk_ime ELSE 'Ostale' END" ;
        sql_str += " ORDER BY origin desc";
	//SaveFile(sql_str);
	try	{
		queryResult = sqlquery(sql_str);
	}catch(exc){
		MessageBox(exc);
	}
    
	RunOnMain("setBankPChart");

}
function setBankPChart()
{
	PieChart("PieChartBank", "init");
    PieChart("PieChartBank", "seriesType", "pie");
    PieChart("PieChartBank", "title", "Pie Chart Title", 20);    
	for(i = 1; i < queryResult.length; i++)
	{
		if(queryResult[i][0]=="")
		{
			queryResult[i][0]= "NEDEFINIRANO";
		}
		PieChart("PieChartBank", "values", int(queryResult[i][1]) , substring(string(queryResult[i][0].trim()), 0, 30), 50);
	}
}

function setRegionPieChart()
{
	//	MessageBox( pieChartStr);
	if (pieChartStr== "Gradovi"); //(gradoviRB)
    {
		sql_str = "";
        sql_str += " SELECT CASE WHEN num<= 5 THEN nksc_city ELSE 'Ostali' END AS CountryID , round(sum(suma),0) as Origin ";
        sql_str += " FROM (SELECT nksc_city, sum(CASE WHEN kdib_ln_dp =  'P' THEN kdib_ln_iznos ELSE 0 END) AS Suma,";
        sql_str += " ROW_NUMBER() OVER( ORDER BY sum(CASE WHEN kdib_ln_dp =  'P' THEN kdib_ln_iznos ELSE 0 END) DESC ) As Num";
        sql_str += " FROM " + trenutnaGodinaBaza + " .dbo.kpkdibgl";
        sql_str += " LEFT JOIN " + trenutnaGodinaBaza + ".dbo.kpkdibln ON kdib_gl_num = kdib_ln_num";
		sql_str += " LEFT JOIN " + trenutnaGodinaBaza + ".dbo.nkscpart ON kdib_ln_partner= nksc_partcode";
		sql_str += " LEFT JOIN " + trenutnaGodinaBaza + ".dbo.kpsybank ON kdib_gl_banka = kpsy_bnk_code";
        sql_str += " WHERE kpsy_bnk_blag <> 'D' AND YEAR(kdib_gl_datum)= " + ovagod_h;
        if (do_mjeseca2  )
		{
            sql_str += " AND Month(kdib_gl_datum)<=" + mjesec_h;
		}	
        else
		{
            sql_str += " AND Month(kdib_gl_datum)=" + mjesec_h;
		}	
        filterPart();
        sql_str += " GROUP BY nksc_city) t";
        sql_str += " GROUP BY CASE WHEN num <= 5 THEN nksc_city ELSE 'Ostali' END" ;
        sql_str += " ORDER BY origin desc";
    }
    elif (pieChartStr== "Regije"); //(regijeRB)
    {
		sql_str= "";
        sql_str += " SELECT CASE WHEN num<= 5 THEN Country ELSE 'Ostale' END AS CountryID , round(sum(suma),0) as Origin ";
        sql_str +=" FROM (SELECT ISNULL(ksdu_sf_opis1,'Nema oznake') as Country, sum(CASE WHEN kdib_ln_dp =  'P' THEN kdib_ln_iznos ELSE 0 END) AS Suma,";
        sql_str +=" ROW_NUMBER() OVER( ORDER BY sum(CASE WHEN kdib_ln_dp =  'P' THEN kdib_ln_iznos ELSE 0 END) DESC ) As Num";
        sql_str += " FROM " + trenutnaGodinaBaza + ".dbo.kpkdibgl AS U ";
        sql_str += " LEFT JOIN " + trenutnaGodinaBaza + ".dbo.kpkdibln ON kdib_gl_num = kdib_ln_num";
		sql_str += " LEFT JOIN " + trenutnaGodinaBaza + " .dbo.nkscpart ON kdib_ln_partner = nksc_partcode"; 
        sql_str += " LEFT JOIN " + CommonDBGet() + ".dbo.KPSYSIFA a ON NKSC_REGIJA = a.ksdu_sf_code AND ksdu_sf_tip = 'V'";
		sql_str += " LEFT JOIN " + trenutnaGodinaBaza + ".dbo.kpsybank ON kdib_gl_banka = kpsy_bnk_code";
        sql_str += " WHERE kpsy_bnk_blag <> 'D' AND YEAR(kdib_gl_datum) = "+ ovagod_h;
        if (do_mjeseca2)
		{
            sql_str += " AND Month(kdib_gl_datum)<="+mjesec_h;
		}	
        else
		{
            sql_str += " AND Month(kdib_gl_datum)="+mjesec_h;
		}	
        filterPart();
        sql_str += " GROUP BY ksdu_sf_opis1) t";
        sql_str += " GROUP BY CASE WHEN num <= 5 THEN country ELSE 'Ostale' END" ;
        sql_str += " ORDER BY origin DESC";
    }
    else 
    {
		//drzave
		sql_str= "";
        sql_str += " SELECT CASE WHEN num<= 5 THEN country ELSE 'Ostale' END AS CountryID , round(sum(suma),0) as Origin ";
        sql_str += " FROM (SELECT ISNULL(ksdu_sf_opis1,'Nema oznake') as Country, sum(CASE WHEN kdib_ln_dp =  'P' THEN kdib_ln_iznos ELSE 0 END) AS Suma,";
        sql_str += " ROW_NUMBER() OVER( ORDER BY sum(CASE WHEN kdib_ln_dp =  'P' THEN kdib_ln_iznos ELSE 0 END) DESC ) As Num";
        sql_str += " FROM " + trenutnaGodinaBaza + ".dbo.kpkdibgl AS U ";
        sql_str += " LEFT JOIN " + trenutnaGodinaBaza + ".dbo.kpkdibln ON kdib_gl_num = kdib_ln_num";
		sql_str += " LEFT JOIN " + trenutnaGodinaBaza + " .dbo.nkscpart ON kdib_ln_partner= nksc_partcode"; 
        sql_str += " LEFT JOIN " + CommonDBGet() + ".dbo.KPSYSIFA ON CASE WHEN nksc_drzava= '' THEN nksc_model ELSE nksc_drzava END = ksdu_sf_code AND ksdu_sf_tip = 'H'";
		sql_str += " LEFT JOIN " + trenutnaGodinaBaza + ".dbo.kpsybank ON kdib_gl_banka = kpsy_bnk_code";
        sql_str += " WHERE kpsy_bnk_blag <> 'D' AND YEAR(kdib_gl_datum)= " + ovagod_h;
        if (razlikaUCijeniField)
		{
            sql_str += " AND kdib_gl_invcd= 'D'";
		}
        if (do_mjeseca2)
		{
            sql_str += " AND Month(kdib_gl_datum)<=" + mjesec_h;
		}	
        else
		{
            sql_str += " AND Month(kdib_gl_datum)="+mjesec_h;
		}
        filterPart();
        sql_str += " GROUP BY ksdu_sf_opis1) t";
        sql_str += " GROUP BY CASE WHEN num <= 5 THEN country ELSE 'Ostale' END";
        sql_str += " ORDER BY origin DESC";

	}
	//SaveFile(sql_str);
	try	{
		queryResult = sqlquery(sql_str);
	}catch(exc){
		MessageBox(exc);
	}
    
	RunOnMain("setPieChart");
}

function setPieChart(){
	PieChart("PieChart1", "init");
    PieChart("PieChart1", "seriesType", "pie");
    PieChart("PieChart1", "title", "Pie Chart Title", 20);    
	for(i = 1; i < queryResult.length; i++)
	{
		if(queryResult[i][0]=="")
		{
			queryResult[i][0]= "NEDEFINIRANO";
		}
		PieChart("PieChart1", "values", int(queryResult[i][1]) , substring(string(queryResult[i][0].trim()), 0, 30), 50);
	}
}

*/

//-------------------------------------------------------
/*
function setKategPieChart()
{
	//ZA SADA SE NE KORISTI!!!!!
	//	MessageBox( pieChartStr);
	sql_str = "";
	sql_str += " SELECT CASE WHEN num<= 5 THEN Naziv ELSE 'Ostali' END AS Kategorija , round(sum(suma),0) as Origin";
	sql_str += " FROM (SELECT ISNULL(CASE WHEN SUBSTRING(mkgr_rezerva,1,50)> '' THEN SUBSTRING(mkgr_rezerva,1,50) ELSE mkgr_naziv END,'NEDEFINIRANO') as naziv,";
	if (neto_dn)
	{
		sql_str += " sum(CASE WHEN nkpr_gl_dviza =  'D' THEN nkpr_gl_tecaj * nkpr_ln_amt ELSE nkpr_ln_amt END) AS Suma,";
		sql_str += " ROW_NUMBER() OVER( ORDER BY sum(CASE WHEN nkpr_gl_dviza =  'D' THEN nkpr_gl_tecaj * nkpr_ln_amt ELSE nkpr_ln_amt END) DESC ) As Num";
	}	
	elif (razlikaUCijeniField  )
	{
		sql_str += " sum(CASE WHEN nkpr_gl_dviza =  'D' THEN nkpr_gl_tecaj * nkpr_ln_amt - nkpr_ln_cenan * nkpr_ln_qtyz ELSE nkpr_ln_amt - nkpr_ln_cenan * nkpr_ln_qtyz END) AS Suma,";
		sql_str += " ROW_NUMBER() OVER( ORDER BY sum(CASE WHEN nkpr_gl_dviza =  'D' THEN nkpr_gl_tecaj * nkpr_ln_amt - nkpr_ln_cenan * nkpr_ln_qtyz ELSE nkpr_ln_amt - nkpr_ln_cenan * nkpr_ln_qtyz END) DESC ) As Num";
	}	
	elif (tezina_dn  )
	{
		sql_str += " sum(nkpr_ln_tezinan) AS Suma,";
		sql_str += " ROW_NUMBER() OVER( ORDER BY sum(nkpr_ln_tezinan) DESC ) As Num";
	}	
	elif (mx3_dn  )
	{
		sql_str += " sum(nkpr_ln_metx3) AS Suma,";
		sql_str += " ROW_NUMBER() OVER( ORDER BY sum(nkpr_ln_metx3) DESC ) As Num";
	}	
	elif (mx2_dn  )
	{
		sql_str += " sum(nkpr_ln_metx2) AS Suma,";
		sql_str += " ROW_NUMBER() OVER( ORDER BY sum(nkpr_ln_metx2) DESC ) As Num";
	}	
	elif (met_dn  )
	{
		sql_str += " sum(nkpr_ln_met) AS Suma,";
		sql_str += " ROW_NUMBER() OVER( ORDER BY sum(nkpr_ln_met) DESC ) As Num";
	}	
	elif (kom_dn  )
	{
		sql_str += " sum(nkpr_ln_kom) AS Suma,";
		sql_str += " ROW_NUMBER() OVER( ORDER BY sum(nkpr_ln_kom) DESC ) As Num";
	}	
	else
	{
		sql_str += " sum(CASE WHEN nkpr_gl_dviza =  'D' THEN nkpr_gl_tecaj * nkpr_ln_pext ELSE nkpr_ln_pext END) AS Suma,";
		sql_str += " ROW_NUMBER() OVER( ORDER BY sum(CASE WHEN nkpr_gl_dviza =  'D' THEN nkpr_gl_tecaj * nkpr_ln_pext ELSE nkpr_ln_pext END) DESC ) As Num";
	}
	sql_str += " FROM " + trenutnaGodinaBaza + ".dbo.nkprinv AS U";
	sql_str += " LEFT JOIN " + trenutnaGodinaBaza + ".dbo.nkprinvl ON nkpr_gl_num = nkpr_ln_invnm";
	sql_str += " LEFT JOIN " + trenutnaGodinaBaza + ".dbo.nkmkarti ON arti_artikl = nkpr_ln_pcode";
	sql_str += " LEFT JOIN " + trenutnaGodinaBaza + ".dbo.pkmkgrup ON arti_kategorija= mkgr_grupa AND mkgr_vrsta= 'K'";
	sql_str += " WHERE YEAR(nkpr_gl_datum)=" + ovagod_h ;
	if (do_mjeseca  )
	{
		sql_str += " AND Month(nkpr_gl_datum)<=" + mjesec_h;
	}	
	else
	{
		sql_str += " AND Month(nkpr_gl_datum)=" + mjesec_h;
	}	
	if (kategorija != '' & klasa != '')
	{
		sql_str += " (grKateg.mkgr_grupa= arti_kategorija AND grKateg.mkgr_vrsta='K') OR (grKateg.mkgr_grupa= arti_klasa AND grKateg.mkgr_vrsta='L')";
	}	
	elif ( kategorija != '')
	{
		sql_str += " grKateg.mkgr_grupa= arti_kategorija AND grKateg.mkgr_vrsta='K'";
	}	
	elif ( klasa != '')
	{
		sql_str += " grKateg.mkgr_grupa= arti_klasa AND grKateg.mkgr_vrsta='L'";
	}
	filterPart();
	sql_str += " GROUP BY SUBSTRING(mkgr_rezerva,1,50),mkgr_naziv) t";
	sql_str += " GROUP BY CASE WHEN num <= 5 THEN Naziv ELSE 'Ostali' END";
	sql_str += " ORDER BY origin desc";
	//SaveFile(sql_str);
	try	{
		queryResult = sqlquery(sql_str);
	}
	catch(exc){
		MessageBox(exc);
	}

	RunOnMain("DisplayKategPieChart");
}

function DisplayKategPieChart(){
	PieChart("PieChartKat", "init");
    PieChart("PieChartKat", "seriesType", "pie");

	for(i = 1; i < queryResult.length; i++)
	{
		PieChart("PieChartKat", "values", int(queryResult[i][1]) , substring(string(queryResult[i][0].trim()), 0, 30), 50);
	}

	PieChart("PieChartKAt", "colors", { "#1C4E80", "#EA6A47", "#5acc6b", "#34d2fa", "#ff45d4", "#fae62f" });
}
*/
//-------------------------------------------------------

/*

function setTop10Products()
{
	SQL_str = "SET query_governor_cost_limit 0;";
    sql_str += "WITH sales AS (";
    sql_str += " SELECT TOP 10 kdib_ln_konto as codeart, gk_ac_opis as Nameart, Sales1=";
    sql_str += " ISNULL(ROUND(SUM(CASE WHEN kdib_ln_dp= 'P' THEN kdib_ln_iznos ELSE 0 END),0), 0)";
    sql_str += " FROM " + trenutnaGodinaBaza + ".dbo.kpkdibgl";
    sql_str += " LEFT JOIN " + trenutnaGodinaBaza + ".dbo.kpkdibln ON kdib_gl_num= kdib_ln_num";
   	sql_str += " LEFT JOIN " + trenutnaGodinaBaza + ".dbo.nkscpart ON kdib_ln_partner = nksc_partcode";
    sql_str += " LEFT JOIN " + trenutnaGodinaBaza + ".dbo.nkgkacct ON kdib_ln_konto= gk_ac_konto";
	sql_str += " LEFT JOIN " + trenutnaGodinaBaza + ".dbo.kpsybank ON kdib_gl_banka = kpsy_bnk_code";
    sql_str += " WHERE 1 = 1 AND kpsy_bnk_blag <> 'D'";
    if (mjesec_h!= "")
	{
        if (do_mjeseca )
		{
            sql_str += " AND month(kdib_gl_datum)<= "+mjesec_h;
            sql_str += " AND YEAR(kdib_gl_datum)= "+ovagod_h;
		}	
        else
		{
            sql_str += " AND month(kdib_gl_datum)= "+mjesec_h;
            sql_str += " AND YEAR(kdib_gl_datum)= "+ovagod_h;
        }
    }

    filterPart();

    sql_str += " GROUP BY kdib_ln_konto , gk_ac_opis";
    sql_str += " ORDER BY sales1 desc)";
    sql_str += " SELECT codeart,Nameart,sales1,0";
    sql_str += " FROM sales";
    sql_str += " ORDER BY sales1 desc";
	try	{
		sqlResult = sqlQuery(sql_str);
	}catch(exc){
		MessageBox(exc);
	}

	size = Size(sqlResult) - 1;

	RunOnMain("fillProductsArrays");

    if (proslaGodinaBaza != "")
	{
    // cntr2= 0;
    //sql_str= "";
    sql_str = " SELECT gk_ac_konto,";
    sql_str += " ISNULL(ROUND(SUM(CASE WHEN kdib_ln_dp= 'P' THEN kdib_ln_iznos ELSE 0 END),0), 0) as sales2";
	sql_str += " FROM "+proslaGodinaBaza+".dbo.kpkdibgl";
    sql_str += " LEFT JOIN "+proslaGodinaBaza+".dbo.kpkdibln ON kdib_gl_num= kdib_ln_num";
   	sql_str += " LEFT JOIN " + proslaGodinaBaza + ".dbo.nkscpart ON kdib_ln_partner = nksc_partcode";
    sql_str += " LEFT JOIN "+proslaGodinaBaza+".dbo.nkgkacct ON kdib_ln_konto= gk_ac_konto";
	sql_str += " LEFT JOIN " + proslaGodinaBaza + ".dbo.kpsybank ON kdib_gl_banka = kpsy_bnk_code";
    sql_str += " WHERE kpsy_bnk_blag <> 'D' AND kdib_ln_konto IN ("+in_string+") ";
    if (mjesec_h != "")
	{
        if (do_mjeseca )
		{
            sql_str += " AND month(kdib_gl_datum)<= "+mjesec_h;
            sql_str += " AND YEAR(kdib_gl_datum)= "+lani_h;
		}
        else
		{
            sql_str += " AND month(kdib_gl_datum)= "+mjesec_h;
            sql_str += " AND YEAR(kdib_gl_datum)= "+lani_h;
        }
    }
    filterPart();
    sql_str += " GROUP BY gk_ac_konto";
    sql_str += " ORDER BY gk_ac_konto";
	try	{
		sqlResult = sqlQuery(sql_str);
	}catch(exc){
		MessageBox(exc);
	}
	
	RunOnMain("fillProductsArrays2");
	}
	RunOnMain("top10Products");
}

function fillProductsArrays(){
	for ( i = 0; i < 10; i++ )
	{
		IndexArt_ar[i] =  0;
		nameart_ar[i] =  "";
		codeart_ar[i] =  "";
		salesart1_ar[i] =  0; 
		salesart2_ar[i] =  0; 
		top10art_ar[i] =  0;
		imageArt_ar[i] = "";
	}	

	if(Size(sqlResult) > 1)
	{
		for ( i = 1; i < Size(sqlResult); i++ )
		{        
			nameart_ar[i - 1] =  sqlResult[i][1]; //namepart;
			codeart_ar[i - 1] =  sqlResult[i][0]; //codepart;
			salesart1_ar[i - 1] =  sqlResult[i][2]; //sales1;
			salesart2_ar[i - 1] =  0; //sqlResult[i][2]; sales2;
			top10art_ar[i - 1] =  i;
		} 
	}


	in_string= "";
	for (cntr = 0; cntr < Size(codeart_ar); cntr++ )
	{
        in_string= in_string+"'"+codeart_ar[cntr];
		if(cntr==Size(codeart_ar)-1)
		{
			in_string= in_string+"'";
		}
		else
		{
			in_string= in_string+"',";
		}
    }
}

function fillProductsArrays2(){
	if(Size(sqlResult) > 1)
	{
		for ( i = 1; i < Size(sqlResult); i++ )
		{    
			cntr2= find_index(codeart_ar,sqlResult[i][0]);    
			if (cntr2 >= 0)  //if not -1
			{
				salesart2_ar[cntr2] =  sqlResult[i][1]; 
				if(salesart2_ar[cntr2] != 0)
				{
					Indexart_ar[cntr2] =  Math.Round(((salesart1_ar[cntr2] - salesart2_ar[cntr2])/salesart2_ar[cntr2]) * 100.00, 0);
				}
				else
				{
					IndexArt_ar[cntr2] =  0;
				}
			} 
			else
			{
				IndexArt_ar[cntr2] =  0;
			}
		}

		for(i = 0; i < Size(salesArt1_ar); i++){
			if(salesart1_ar[i] > salesart2_ar[i]){
				imageArt_ar[i] = strtrim(ipath()) + "greenArrow64.png";
			}elif(salesart1_ar[i] < salesart2_ar[i]){
				imageArt_ar[i] = strtrim(ipath()) + "redArrow64.png";
			}else{
				imageArt_ar[i] = "";
			}
		}
	}
}

function top10Products(){
	DisplayArray("dgArtikli", "close");
	Format("SALESART2_AR", "nofd");
	Format("SALESART1_AR", "nofd");
	
	DisplayArraySetup("dgArtikli", counterFld: "cntr4", activeElements: size, maxElements: 10);
}

//---------------------------------------------------------------------------

function setCustomerDataGrid()
{
    SQL_str ="SET query_governor_cost_limit 0;";
    sql_str += "WITH sales AS (";
    sql_str += " SELECT TOP 10 nksc_partname as NamePart,kdib_ln_partner as CodePart,SalesNew=";
    sql_str += " ISNULL(ROUND(SUM(CASE WHEN kdib_ln_dp= 'P' THEN kdib_ln_iznos ELSE 0 END),0), 0)";
    sql_str += " FROM "+trenutnaGodinaBaza+".dbo.kpkdibgl";
    sql_str += " LEFT JOIN "+trenutnaGodinaBaza+".dbo.kpkdibln ON kdib_gl_num= kdib_ln_num";
    sql_str += " LEFT JOIN "+trenutnaGodinaBaza+".dbo.nkscpart ON kdib_ln_partner= nksc_partcode";
	sql_str += " LEFT JOIN " + trenutnaGodinaBaza + ".dbo.kpsybank ON kdib_gl_banka = kpsy_bnk_code";
    sql_str += " WHERE 1=1 AND kpsy_bnk_blag <> 'D' AND kdib_ln_partner<> ''";
    if (mjesec_h!= "")
	{
        if (do_mjeseca )
		{
            sql_str += " AND month(kdib_gl_datum)<= "+mjesec_h;
            sql_str += " AND YEAR(kdib_gl_datum)= "+ovagod_h;
		}	
        else
		{
            sql_str += " AND month(kdib_gl_datum)= "+mjesec_h;
            sql_str += " AND YEAR(kdib_gl_datum)= "+ovagod_h;
        }
    }

    filterPart();

    sql_str += " GROUP BY nksc_partname,kdib_ln_partner";
    sql_str += " ORDER BY salesNew desc)";
    sql_str += " SELECT codePart,NamePart,salesNew,0";
    sql_str += " FROM sales";
    sql_str += " ORDER BY salesNew desc";
	try	{
		sqlResult = sqlQuery(sql_str);
	}catch(exc){
		MessageBox(exc);
	}

	size = Size(sqlResult) - 1;

	//SaveFile(sql_str);
	RunOnMain("fillCustomerArrays");

    if (proslaGodinaBaza != "")
	{

    RunOnMain("setCntr2");

    //sql_str= "";
	
    sql_str = " SELECT kdib_ln_partner,";
	sql_str += " ISNULL(ROUND(SUM(CASE WHEN kdib_ln_dp= 'P' THEN kdib_ln_iznos ELSE 0 END),0), 0) as sales2";
    }
    sql_str += " FROM "+proslaGodinaBaza+".dbo.kpkdibgl";
    sql_str += " LEFT JOIN "+proslaGodinaBaza+".dbo.kpkdibln ON kdib_gl_num= kdib_ln_num";
   	sql_str += " LEFT JOIN " + proslaGodinaBaza + ".dbo.nkscpart ON kdib_ln_partner = nksc_partcode";
	sql_str += " LEFT JOIN " + proslaGodinaBaza + ".dbo.kpsybank ON kdib_gl_banka = kpsy_bnk_code";
    sql_str += " WHERE kpsy_bnk_blag <> 'D' AND kdib_ln_partner IN ("+in_string+") ";
    if (mjesec_h != "")
	{
        if (do_mjeseca )
		{
            sql_str += " AND month(kdib_gl_datum)<= "+mjesec_h;
            sql_str += " AND YEAR(kdib_gl_datum)= "+lani_h;
		}
        else
		{
            sql_str += " AND month(kdib_gl_datum)= "+mjesec_h;
            sql_str += " AND YEAR(kdib_gl_datum)= "+lani_h;
        }
    }

    filterPart();
    sql_str += " GROUP BY kdib_ln_partner";
    sql_str += " ORDER BY kdib_ln_partner";
	try	{
		sqlResult = sqlQuery(sql_str);
	}catch(exc){
		MessageBox(exc);
	}
	
	RunOnMain("fillCustomerArrays2");

	RunOnMain("customerDataGrid");
}

function fillCustomerArrays(){
	for ( i = 0; i < 10; i++ )
	{
		namePart_ar[i] =  "";
		codePart_ar[i] =  "";
		salesPart1_ar[i] =  0;
		salesPart2_ar[i] =  0;
		top10Part_ar[i] =  0;
		IndexPart_ar[i] =  0;
		imagePart_ar[i] = "";
	}	

	if(Size(sqlResult) > 1)
	{
		for ( i = 1; i < Size(sqlResult); i++ )
		{        
			namePart_ar[i - 1] =  sqlResult[i][1]; //namepart;
			codePart_ar[i - 1] =  sqlResult[i][0]; //codepart;
			salesPart1_ar[i - 1] =  sqlResult[i][2]; //sales1;
			salesPart2_ar[i - 1] =  0; //sqlResult[i][2]; sales2;
			top10Part_ar[i - 1] =  i;
		} 
	}

	in_string= "";
	for (cntr = 0; cntr < Size(codePart_ar); cntr++ )
	{
        in_string= in_string+"'"+codePart_ar[cntr];
		if(cntr==Size(codePart_ar)-1)
		{
			in_string= in_string+"'";
		}
		else
		{
			in_string= in_string+"',";
		}
    }
}

function setCntr2(){
	cntr2= 0;
}

function fillCustomerArrays2(){    
	if(Size(sqlResult) > 1)
	{
		for ( i = 1; i < Size(sqlResult); i++ )
		{    
			cntr2= find_index(codepart_ar,sqlResult[i][0]);    
			if (cntr2 >= 0)  //if not -1
			{
				salesPart2_ar[cntr2] =  sqlResult[i][1]; 
				if(salesPart2_ar[cntr2] != 0)
				{
					IndexPart_ar[cntr2] =  Math.Round(((salesPart1_ar[cntr2] - salesPart2_ar[cntr2])/salesPart2_ar[cntr2]) * 100, 0);
				}
				else
				{
					IndexPart_ar[cntr2] =  0;
				}
			} 
			else
			{
				IndexPart_ar[cntr2] =  0;
			}
		}

		for(i = 0; i < Size(salesPart1_ar); i++){
			if(salesPart1_ar[i] > salesPart2_ar[i]){
				imagePart_ar[i] = strtrim(ipath()) + "greenArrow64.png";
			}elif(salesPart1_ar[i] < salesPart2_ar[i]){
				imagePart_ar[i] = strtrim(ipath()) + "redArrow64.png";
			}else{
				imagePart_ar[i] = "";
			}
		}
	}
}

function customerDataGrid(){
	DisplayArray("dgStavke", "close");
	Format("SALESPART2_AR", "nofd");
	Format("SALESPART1_AR", "nofd");
	DisplayArraySetup("dgStavke", counterFld: "cntr1", activeElements: size, maxElements: 10);
}

//-----------------------------------------------------------


*/