CreateWindow(strTrim(tpath()) + "wxcjenikup.xaml");



// DEFINE arrayRbr type i size 3 array 100;
// DEFINE arrayNazivFirme type a size 255 array 100;
// DEFINE arrayPoslovnaGodina type a size 10 array 100;
// DEFINE arrayNazivBaze type a size 255 array 100;
// DEFINE arrayDescription type a size 255 array 100;

// DEFINE cntr1 type i size 10;
// DEFINE actElem1 type i size 10;
// DEFINE cntr1 type i size 10;
// DEFINE cntr1 type i size 10;

// DEFINE dialogResult type a size 255;

// DEFINE BackupPath type a size 255;
// DEFINE BackupFilenames type a size 255 array 100;

// DEFINE LocalBackupPath type a size 255;
// // DEFINE LocalBackupFilenames type a size 255 array 100;
// DEFINE localBakFile type a size 255;
// DEFINE localZipFile type a size 255;
// DEFINE localBakFilename type a size 255;


// DEFINE FinalBackupPath type a size 255;

// DEFINE FtpDirectoryPath type a size 255;
// DEFINE FtpPort type a size 255;

// DEFINE destinationFile type a size 255;

// DEFINE backupDateShort type a size 8;
// DEFINE backupTimeShort type a size 6;
// DEFINE backupDateSQL type a size 10;
// DEFINE backupTimeSQL type a size 8;

// DEFINE isRunning type l;
// DEFINE hasErrors type l;

// DEFINE log type a size 1000 array 1000;
// DEFINE logCount type i size 4;
// DEFINE logFinal type a size 1000000;

// //mail
// DEFINE OutgoingEmailServer type a size 100;
// DEFINE EmailUsername type a size 100;
// DEFINE EmailPassword type a size 100;
// DEFINE SenderEmail type a size 100;
// DEFINE EmailSenderName type a size 100;
// DEFINE DestinationEmail type a size 100;
// DEFINE EmailSubject type a size 100;
// DEFINE NazivFirme type a size 100;

// DEFINE checkboxZakaziArhiviranje type l;

// DEFINE zakazanoTime type t size 8;

// DEFINE zakazanoSati type i size 2;
// DEFINE zakazanoMinuta type i size 2;

// DEFINE zakazano type l;

// DEFINE ftp type l;
// DEFINE FtpUsername, FtpPassword type a size 100;

DEFINE winxIniPath type a size 255;
DEFINE tasproIniPath type a size 255;

DEFINE DatabasePrazno type a size 50;
DEFINE ShortDbName type a size 5;
DEFINE ShortDbNameWithoutB type a size 5;
DEFINE CurrentYearDatabase type a size 255;

DEFINE sqlString type a size 10000;

// NKSYSYCO -> NKSYS_VALUE
DEFINE FTP_SERVER type a size 120; 
DEFINE FTP_PORT type a size 120; 
DEFINE FTP_USERNAME type a size 120; 
DEFINE FTP_PASSWORD type a size 120; 
DEFINE FTP_DIRECTORY type a size 120; 
DEFINE CSV_DIRECTORY type a size 120; 
DEFINE SKLADISTE type a size 120; 
//E-MAIL config
DEFINE EMAIL_SERVER type a size 120; // mail server
DEFINE EMAIL_USERNAME type a size 120; 
DEFINE EMAIL_PASSWORD type a size 120; 
DEFINE EMAIL_SENDR_ADD type a size 120; // email sender address
DEFINE EMAIL_SENDR_NME type a size 120; // email sender name
DEFINE EMAIL_DEST_ADD type a size 120; // recipient(s) address(es)

DEFINE CSVFileLine type a size 3000;

// DEFINE ARTI_ARTIKL, ARTI_SIFART_BAR type a size 15;

DEFINE nazivProizvoda type a size 50;
DEFINE sifraArtikla type a size 15;
DEFINE markaProizvoda type a size 22;
DEFINE jedinicnaKolicina type a size 18;
DEFINE jedinicaMjere type a size 14;
DEFINE maloprodajnaCijena type a size 19;
DEFINE cijenaZaJedinicuMjere type a size 24;
DEFINE barkod type a size 15;
DEFINE kategorijaNaziv type a size 197;

// log
DEFINE log type a size 10000 array 5000;
DEFINE logCount type i size 5;
DEFINE logFinal type a size 50000000;


function wxcjenikup_onDisplay()
{   
    Cursor("wait");

    // NKSYLOGS -> 'P'


    GetCurrentDatabaseName();
    //DELETE !!!
    CurrentYearDatabase = "V__DATAX_GZ__BGZ";

    InitConfigInDbase();

    TRAP("F9", "openConfig");


    //EMAIL("emlSendMsg", "BODY 2", "", "", "mail.aurasoft.hr", "AuraSoft123", "upload-cjenika@aurasoft.hr", "upload-cjenika@aurasoft.hr", "Upload Cjenika", "dalibor@aurasoft.hr, enzo@aurasoft.hr", "NASLOV 2");   

    Cursor("dflt");


    // MessageBox("12345678 = " + string(isBarcode("12345678")));
    // MessageBox("1234567890123 = " + string(isBarcode("1234567890123")));
    // MessageBox("5678 = " + string(isBarcode("5678")));
    // MessageBox("1234567A = " + string(isBarcode("1234567A")));
    // MessageBox("02345678 = " + string(isBarcode("02345678")));
    
    


    // //SaveFile(Encryptstr("setwofish", "wxbackup@aurasoft.hr", "12345"));

    // SetImage("asImage", strtrim(ipath())+"as1.png");

    // Clock("SatLabel");

    // zakazanoSati = 0;
    // zakazanoMinuta = 0;
    // checkboxZakaziArhiviranje = false;

    // logCount = 0;

    // GetDatabaseNames();
    
    // DisplayArray("datagridDatabases", "close");
    // DisplayArraySetup("datagridDatabases", counterFld: cntr1, activeElements: actElem1, maxElements: 100);

    

    // if(!DIR_EXISTS(BackupPath)){
    //     MAKE_DIR(BackupPath);
    //     //MessageBox("Kreiran je direktorij BackupPath iz ini datoteke");
    // }
   
    // if(!DIR_EXISTS(LocalBackupPath)){
    //     MAKE_DIR(LocalBackupPath);
    //     //MessageBox("Kreiran je direktorij LocalBackupPath iz ini datoteke");
    // }


    // isRunning = false;
    // hasErrors = false;

    // SetFocus("btnPokreni");
}


function wxcjenikup_onClose()
{   
    // NKSYLOGS -> 'R'
}

//---------------------------------------------------

function GetCurrentDatabaseName(){

    // naziv database "prazno"(npr. "C__DATAX__B") iz Winx.ini
    winxIniPath = strtrim(wpath()) + "winx.ini";

    if(!regedit("regOpen", winxIniPath, "rtFile")){
        MessageBox("Datoteka " + winxIniPath + " nije dostupna.");
        Cursor("dflt");
        quit;
    }

    DatabasePrazno = regedit("regReadStr", 'MSSQL_SERVER', 'UserBase');
    if(DatabasePrazno == ""){
        MessageBox("Potrebno je podesiti UserBase(DatabasePrazno) u ini datoteci.");
        regedit("regWriteStr", 'MSSQL_SERVER', 'UserBase', "");
        Cursor("dflt");
        quit;
    }

    regedit("regClose");
    //--------------

    // kratki naziv baze(npr. "B25") iz Taspro.ini
    tasproIniPath = strtrim(wpath()) + "taspro.ini";

    if(!regedit("regOpen", tasproIniPath, "rtFile")){
        MessageBox("Datoteka " + tasproIniPath + " nije dostupna.");
        Cursor("dflt");
        quit;
    }

    ShortDbName = regedit("regReadStr", 'Setup', 'DfltCompanyCode');
    if(ShortDbName == ""){
        MessageBox("Potrebno je podesiti DfltCompanyCode(ShortDbName) u ini datoteci.");
        regedit("regWriteStr", 'Setup', 'DfltCompanyCode', "");
        Cursor("dflt");
        quit;
    }

    regedit("regClose");

    ShortDbNameWithoutB = substring(ShortDbName, 1, 2);
    //--------------

    //sql upit -> C__DATAX__B.dbo.NKSYCCYR WHERE kratkiNazivBaze = 'B25' -> dobit puno ime baze trenutne godine
    sqlString = "SELECT SY_CC_DBASE from " + DatabasePrazno + ".dbo.NKSYCCYR WHERE SY_CC_CODE = '" + ShortDbNameWithoutB + "'";
    // Msg(sqlString);
    sqlResult = SqlQuery(sqlString);

    if(Size(sqlResult) <= 1){
        MessageBox("Greška prilikom dohvata trenutne godine iz baze.");
        Cursor("dflt");
        quit;
    }else{
        CurrentYearDatabase = strTrim(sqlResult[1][0]);
    }

    return;
}

function InitConfigInDbase(){
    // FTP_SERVER
    if(!recordExistsInNKSYSYCO("FTP_SERVER")){
        AddRecordInNKSYSYCO("FTP_SERVER", "Adresa FTP servera");
    }else{
        sqlString = "SELECT RTRIM(NKSYS_VALUE) from " + CurrentYearDatabase + 
        ".dbo.NKSYSYCO WHERE NKSYS_MODUL = 'WKPO' AND NKSYS_GRUP = 'CJENIK' AND NKSYS_GRUP2 = 'WEB' AND NKSYS_FIELD = 'FTP_SERVER'";
        sqlResult = SqlQuery(sqlString);
        FTP_SERVER = sqlResult[1][0];
    }
    
    // FTP_PORT
    if(!recordExistsInNKSYSYCO("FTP_PORT")){
        AddRecordInNKSYSYCO("FTP_PORT", "Port FTP servera");
    }else{
        sqlString = "SELECT RTRIM(NKSYS_VALUE) from " + CurrentYearDatabase + 
        ".dbo.NKSYSYCO WHERE NKSYS_MODUL = 'WKPO' AND NKSYS_GRUP = 'CJENIK' AND NKSYS_GRUP2 = 'WEB' AND NKSYS_FIELD = 'FTP_PORT'";
        sqlResult = SqlQuery(sqlString);
        FTP_PORT = sqlResult[1][0];
    }

    // FTP_USERNAME
    if(!recordExistsInNKSYSYCO("FTP_USERNAME")){
        AddRecordInNKSYSYCO("FTP_USERNAME", "Korisničko ime za FTP server");
    }else{
        sqlString = "SELECT RTRIM(NKSYS_VALUE) from " + CurrentYearDatabase + 
        ".dbo.NKSYSYCO WHERE NKSYS_MODUL = 'WKPO' AND NKSYS_GRUP = 'CJENIK' AND NKSYS_GRUP2 = 'WEB' AND NKSYS_FIELD = 'FTP_USERNAME'";
        sqlResult = SqlQuery(sqlString);
        FTP_USERNAME = sqlResult[1][0];
    }

    // FTP_PASSWORD
    if(!recordExistsInNKSYSYCO("FTP_PASSWORD")){
        AddRecordInNKSYSYCO("FTP_PASSWORD", "Lozinka za FTP server");
    }else{
        sqlString = "SELECT RTRIM(NKSYS_VALUE) from " + CurrentYearDatabase + 
        ".dbo.NKSYSYCO WHERE NKSYS_MODUL = 'WKPO' AND NKSYS_GRUP = 'CJENIK' AND NKSYS_GRUP2 = 'WEB' AND NKSYS_FIELD = 'FTP_PASSWORD'";
        sqlResult = SqlQuery(sqlString);
        FTP_PASSWORD = sqlResult[1][0];
    }

    // FTP_DIRECTORY
    if(!recordExistsInNKSYSYCO("FTP_DIRECTORY")){
        AddRecordInNKSYSYCO("FTP_DIRECTORY", "Direktorij na FTP serveru");
    }else{
        sqlString = "SELECT RTRIM(NKSYS_VALUE) from " + CurrentYearDatabase + 
        ".dbo.NKSYSYCO WHERE NKSYS_MODUL = 'WKPO' AND NKSYS_GRUP = 'CJENIK' AND NKSYS_GRUP2 = 'WEB' AND NKSYS_FIELD = 'FTP_DIRECTORY'";
        sqlResult = SqlQuery(sqlString);
        FTP_DIRECTORY = sqlResult[1][0];
    }

    // CSV_DIRECTORY
    if(!recordExistsInNKSYSYCO("CSV_DIRECTORY")){
        AddRecordInNKSYSYCO("CSV_DIRECTORY", "Direktorij za CSV datoteke cjenika");
    }else{
        sqlString = "SELECT RTRIM(NKSYS_VALUE) from " + CurrentYearDatabase + 
        ".dbo.NKSYSYCO WHERE NKSYS_MODUL = 'WKPO' AND NKSYS_GRUP = 'CJENIK' AND NKSYS_GRUP2 = 'WEB' AND NKSYS_FIELD = 'CSV_DIRECTORY'";
        sqlResult = SqlQuery(sqlString);
        CSV_DIRECTORY = sqlResult[1][0];
    }

    // SKLADISTE
    if(!recordExistsInNKSYSYCO("SKLADISTE")){
        AddRecordInNKSYSYCO("SKLADISTE", "Šifra skladišta za cjenik");
    }else{
        sqlString = "SELECT RTRIM(NKSYS_VALUE) from " + CurrentYearDatabase + 
        ".dbo.NKSYSYCO WHERE NKSYS_MODUL = 'WKPO' AND NKSYS_GRUP = 'CJENIK' AND NKSYS_GRUP2 = 'WEB' AND NKSYS_FIELD = 'SKLADISTE'";
        sqlResult = SqlQuery(sqlString);
        SKLADISTE = sqlResult[1][0];
    }

    //// EMAIL CONFIG
    // EMAIL_SERVER
    if(!recordExistsInNKSYSYCO("EMAIL_SERVER")){
        AddRecordInNKSYSYCO("EMAIL_SERVER", "(outgoing) e-mail server");
    }else{
        sqlString = "SELECT RTRIM(NKSYS_VALUE) from " + CurrentYearDatabase + 
        ".dbo.NKSYSYCO WHERE NKSYS_MODUL = 'WKPO' AND NKSYS_GRUP = 'CJENIK' AND NKSYS_GRUP2 = 'WEB' AND NKSYS_FIELD = 'EMAIL_SERVER'";
        sqlResult = SqlQuery(sqlString);
        EMAIL_SERVER = sqlResult[1][0];
    }
    
    // EMAIL_USERNAME
    if(!recordExistsInNKSYSYCO("EMAIL_USERNAME")){
        AddRecordInNKSYSYCO("EMAIL_USERNAME", "E-mail username");
    }else{
        sqlString = "SELECT RTRIM(NKSYS_VALUE) from " + CurrentYearDatabase + 
        ".dbo.NKSYSYCO WHERE NKSYS_MODUL = 'WKPO' AND NKSYS_GRUP = 'CJENIK' AND NKSYS_GRUP2 = 'WEB' AND NKSYS_FIELD = 'EMAIL_USERNAME'";
        sqlResult = SqlQuery(sqlString);
        EMAIL_USERNAME = sqlResult[1][0];
    }
    
    // EMAIL_PASSWORD
    if(!recordExistsInNKSYSYCO("EMAIL_PASSWORD")){
        AddRecordInNKSYSYCO("EMAIL_PASSWORD", "E-mail password");
    }else{
        sqlString = "SELECT RTRIM(NKSYS_VALUE) from " + CurrentYearDatabase + 
        ".dbo.NKSYSYCO WHERE NKSYS_MODUL = 'WKPO' AND NKSYS_GRUP = 'CJENIK' AND NKSYS_GRUP2 = 'WEB' AND NKSYS_FIELD = 'EMAIL_PASSWORD'";
        sqlResult = SqlQuery(sqlString);
        EMAIL_PASSWORD = sqlResult[1][0];
    }
    
    // EMAIL_SENDR_ADD
    if(!recordExistsInNKSYSYCO("EMAIL_SENDR_ADD")){
        AddRecordInNKSYSYCO("EMAIL_SENDR_ADD", "Sender e-mail address");
    }else{
        sqlString = "SELECT RTRIM(NKSYS_VALUE) from " + CurrentYearDatabase + 
        ".dbo.NKSYSYCO WHERE NKSYS_MODUL = 'WKPO' AND NKSYS_GRUP = 'CJENIK' AND NKSYS_GRUP2 = 'WEB' AND NKSYS_FIELD = 'EMAIL_SENDR_ADD'";
        sqlResult = SqlQuery(sqlString);
        EMAIL_SENDR_ADD = sqlResult[1][0];
    }
    
    // EMAIL_SENDR_NME
    if(!recordExistsInNKSYSYCO("EMAIL_SENDR_NME")){
        AddRecordInNKSYSYCO("EMAIL_SENDR_NME", "Sender name");
    }else{
        sqlString = "SELECT RTRIM(NKSYS_VALUE) from " + CurrentYearDatabase + 
        ".dbo.NKSYSYCO WHERE NKSYS_MODUL = 'WKPO' AND NKSYS_GRUP = 'CJENIK' AND NKSYS_GRUP2 = 'WEB' AND NKSYS_FIELD = 'EMAIL_SENDR_NME'";
        sqlResult = SqlQuery(sqlString);
        EMAIL_SENDR_NME = sqlResult[1][0];
    }
    
    // EMAIL_DEST_ADD
    if(!recordExistsInNKSYSYCO("EMAIL_DEST_ADD")){
        AddRecordInNKSYSYCO("EMAIL_DEST_ADD", "Destination e-mail addresses");
    }else{
        sqlString = "SELECT RTRIM(NKSYS_VALUE) from " + CurrentYearDatabase + 
        ".dbo.NKSYSYCO WHERE NKSYS_MODUL = 'WKPO' AND NKSYS_GRUP = 'CJENIK' AND NKSYS_GRUP2 = 'WEB' AND NKSYS_FIELD = 'EMAIL_DEST_ADD'";
        sqlResult = SqlQuery(sqlString);
        EMAIL_DEST_ADD = sqlResult[1][0];
    }
}

function recordExistsInNKSYSYCO(fieldName){
    sqlString = "SELECT COUNT(*) from " + CurrentYearDatabase + 
        ".dbo.NKSYSYCO WHERE NKSYS_MODUL = 'WKPO' AND NKSYS_GRUP = 'CJENIK' AND NKSYS_GRUP2 = 'WEB' AND NKSYS_FIELD = '" + fieldName + "'";
    sqlResult = SqlQuery(sqlString);
    if(sqlResult[1][0] == 0){
        return false;
    }else{
        return true;
    }
}

function AddRecordInNKSYSYCO(fieldName, description){
    sqlString = "INSERT INTO " + CurrentYearDatabase + 
        ".dbo.NKSYSYCO (NKSYS_MODUL, NKSYS_GRUP, NKSYS_GRUP2, NKSYS_FIELD, NKSYS_VALUE, NKSYS_DESC) VALUES ('WKPO', 'CJENIK', 'WEB', '" + fieldName + "', '', '" + description + "')";
    sqlResult = SqlNonQuery(sqlString);
}

function openConfig(){
    include(strtrim(tpath()) + "wxcjenikup_config.cscs");
    ModalWindow(strtrim(tpath()) + "wxcjenikup_config.xaml");
}

function btnPosalji@clicked(){
    cursor("wait");
    PosaljiCjenik();
    cursor("dflt");
}

function PosaljiCjenik(){

    // NKSYLOGS -> 'U'



    if(CreateCSVFile()){
        FTPUpload();
    }
    // else{
    //     //return;
    // }



    
    FormatLog();
    SendEmail();
    SaveLog();

    // NKSYLOGS -> 'I'
}

function CreateCSVFile(){
    try{
        // Create empty file
        SaveFile("", CSV_DIRECTORY + "cjenik_temp.csv");
        // KORIGIRAT nazive kolona!!
        CSVFileLine = 
            "naziv proizvoda                                   |" + 
            "šifra proizvoda|" + 
            "marka proizvoda|" + 
            "jedinična količina|" + 
            "jedinica mjere|" + 
            "maloprodajna cijena|" + 
            "cijena za jedinicu mjere|" + 
            "barkod         |" + 
            "kategorija proizvoda";
        // Append line
        SaveFile(CSVFileLine, CSV_DIRECTORY + "cjenik_temp.csv", "A");


        // TRIMAT !!!
        sqlString = "SELECT" +

        // " TOP 10" +

        " ARTI_NAZIV as nazivArtikla," + 
        " trim(ARTI_ARTIKL) as ARTI_ARTIKL," + 
        // REZ2 PROMIJENIT !!!
        " (CASE WHEN ARTI_REZX4 = '' THEN '-' ELSE ARTI_REZX4 END) as markaProizvoda," + 
        " TRIM(CONCAT(trim(ARTI_FAKTOR_JMJ), ' ', TRIM(ARTI_JMJ_DOD))) as jedinicnaKolicina," + 
        " ARTI_JED_MJERE as jedinicaMjere," + 
        " CONVERT(varchar(15), ZAMK_CENA_PROD) as maloprodajnaCijena," + 
        
        " CONVERT(varchar(10)," + 
        " (CASE" + 
        " WHEN ARTI_FAKTOR_JMJ = ''" + 
        " THEN 0" + 
        " WHEN CONVERT(float, REPLACE(ARTI_FAKTOR_JMJ, ',', '.')) = 0" + 
        " THEN 0" + 
        " ELSE ROUND(((1 / CONVERT(float, REPLACE(ARTI_FAKTOR_JMJ, ',', '.'))) * ZAMK_CENA_PROD), 2)" + 
        " END" + 
        " )" + 
        " ) as cijenaZaJedinicuMjere," + 

        " trim(ARTI_SIFART_BAR) as ARTI_SIFART_BAR," + 
        " ISNULL((CASE WHEN LEN(MKGR_REZERVA) > 0 THEN MKGR_REZERVA ELSE MKGR_NAZIV END), '-') as kategorijaNaziv" + 
        
        " FROM " + CurrentYearDatabase + ".dbo.NKMKARTI" + 
        " LEFT JOIN " + CurrentYearDatabase + ".dbo.NKMKARTK on ARTI_ARTIKL = ZAMK_SIF_ARTIKL" + 
        " LEFT JOIN " + CurrentYearDatabase + ".dbo.PKMKGRUP on ARTI_KATEGORIJA = MKGR_GRUPA and MKGR_VRSTA = 'K'" + 
        
        " WHERE ZAMK_SKLADISTE = " + SKLADISTE + 
        " AND ZAMK_BR_NA_SKL <> 0" +
        " AND (ARTI_ARTIKL != '' or ARTI_SIFART_BAR != '')";
        
        // SaveFile(sqlString, CSV_DIRECTORY + "upit.sql");
        sqlResult = SqlQuery(sqlString);

        for(i = 1; i < Size(sqlResult); i++){
            PopuniArtiklIBarkod(sqlResult[i][1], sqlResult[i][7]);
            
            nazivProizvoda = sqlResult[i][0];
            markaProizvoda = sqlResult[i][2];
            jedinicnaKolicina = sqlResult[i][3];
            jedinicaMjere = sqlResult[i][4];
            maloprodajnaCijena = sqlResult[i][5];
            cijenaZaJedinicuMjere = sqlResult[i][6];
            kategorijaNaziv = sqlResult[i][8];

            // string padding
            // šifra proizvoda
            for(k = sifraArtikla.length; k < 15; k++){
                sifraArtikla = sifraArtikla + " ";
            }
            // markaProizvoda
            for(k = markaProizvoda.length; k < 15; k++){
                markaProizvoda += " ";
            }
            // jedinicna kolicina
            for(k = jedinicnaKolicina.length; k < 18; k++){
                jedinicnaKolicina += " ";
            }
            // jedinica mjere
            for(k = jedinicaMjere.length; k < 14; k++){
                jedinicaMjere += " ";
            }
            // maloprodajna cijena
            for(k = maloprodajnaCijena.length; k < 19; k++){
                maloprodajnaCijena += " ";
            }
            // cijena za jedinicu mjere
            for(k = cijenaZaJedinicuMjere.length; k < 24; k++){
                cijenaZaJedinicuMjere += " ";
            }
            // barkod
            for(k = barkod.length; k < 15; k++){
                barkod += " ";
            }
            // kategorija proizvoda
            for(k = kategorijaNaziv.length; k < 197; k++){
                kategorijaNaziv += " ";
            }
            
            CSVFileLine = nazivProizvoda + "|" + sifraArtikla + "|"
            + markaProizvoda + "|" + jedinicnaKolicina + "|"
            + jedinicaMjere + "|" + maloprodajnaCijena + "|"
            + cijenaZaJedinicuMjere + "|" + barkod + "|"
            + kategorijaNaziv;
            
            // Append to file
            SaveFile(CSVFileLine, CSV_DIRECTORY + "cjenik_temp.csv", "A");
        }

        // MessageBox("CSV datoteka(cjenik) uspješno kreirana.");
        LogAdd("CSV datoteka(cjenik) uspješno kreirana.");

        return true;

    }catch(exc){
        LogAdd("GREŠKA: Greška kreiranja CSV datoteke(cjenika): " + exc);
        return false;
    }
    
}

function PopuniArtiklIBarkod(ARTI_ARTIKL, ARTI_SIFART_BAR){
    sifraArtikla = "";
    barkod = "";

    if(isBarcode(ARTI_ARTIKL)){
        barkod = ARTI_ARTIKL;
        sifraArtikla = ARTI_SIFART_BAR;
    }elif(isBarcode(ARTI_SIFART_BAR)){
        barkod = ARTI_SIFART_BAR;
        sifraArtikla = ARTI_ARTIKL;
    }else{
        barkod = "";
        sifraArtikla = ARTI_ARTIKL; // !!!
    }
}

function isBarcode(stringValue){
    if(stringValue.length == 13 || stringValue.length == 8){
        isNumeric = true;
        for(j = 0; j < stringValue.length; j++){
            currentLetter = substring(stringValue, j, 1);
            if(
                currentLetter == "0" ||
                currentLetter == "1" ||
                currentLetter == "2" ||
                currentLetter == "3" ||
                currentLetter == "4" ||
                currentLetter == "5" ||
                currentLetter == "6" ||
                currentLetter == "7" ||
                currentLetter == "8" ||
                currentLetter == "9")
            {
                
            }
            else{
                isNumeric = false;
            }
        }
        return isNumeric;
    }
    else{
        return false;
    }
}

function FTPUpload(){
    try{
        FTP("ftp", "s", FTP_SERVER, int(FTP_PORT), FTP_USERNAME, FTP_PASSWORD, FTP_DIRECTORY, CSV_DIRECTORY, "cjenik_temp.csv");
        LogAdd("CSV datoteka(cjenik) uspješno poslana na FTP server.");
    }catch(exc){
        LogAdd("GREŠKA: CSV datoteka(cjenik) NIJE poslana na FTP server: " + exc);
    }
}









// function cbZakaziArhiviranje@Clicked(){
//     if(!checkboxZakaziArhiviranje){
//         zakazano = false;
//         CancelScheduledFunction();
//         SetWidgetOptions("StatusLabel", "Content", "");
//         SetWidgetOptions("StatusLabel2", "Content", "");

//         if(!regedit("regOpen", winxIniPath, "rtFile")){
//             MessageBox("Datoteka " + winxIniPath + " nije dostupna.");
//             Cursor("dflt");
//             quit;
//         }
//         regedit("regWriteStr", 'BACKUP', 'Zakazano', string(zakazano));
//         regedit("regClose");
//     }
// }







// function btnPokreni@clicked()
// {
//     //supress running multiple times
//     if(isRunning){
//         return;
//     }

//     winxIniPath = strtrim(wpath()) + "winx.ini";

//     if(!DIR_EXISTS(BackupPath)){
//         MessageBox("Potrebno je podesiti path za kreiranje arhive(BackupPath) u ini datoteci.");
//         Cursor("dflt");
//         return;
//     }
    
//     if(!DIR_EXISTS(LocalBackupPath)){
//         MessageBox("Potrebno je podesiti lokalni path za kreiranje arhive(LocalBackupPath) u ini datoteci.");
//         Cursor("dflt");
//         return;
//     }
    
    

//     if(FinalBackupPath.length > 2 && substring(FinalBackupPath, 1, 1) == ":"){
//         ftp = false;
//     }else{
//         ftp = true;
//     }

//     if(ftp == false){
//         if(!DIR_EXISTS(FinalBackupPath)){
//             MessageBox("Direktorij za arhivu ne postoji.\nMolim odaberite drugi direktorij.");
//             return;
//         }
//     }
//     else{
//         //ftp
//         if(!regedit("regOpen", winxIniPath, "rtFile")){
//             MessageBox("Datoteka " + winxIniPath + " nije dostupna.");
//             Cursor("dflt");
//             quit;
//         }


//         FtpDirectoryPath = regedit("regReadStr", 'BACKUP', 'FtpDirectoryPath');
//         if(FtpDirectoryPath == ""){
//             regedit("regWriteStr", 'BACKUP', 'FtpDirectoryPath', "");
//             FtpDirectoryPath = "";
//         }
        
//         FtpPort = regedit("regReadStr", 'BACKUP', 'FtpPort');
//         if(FtpPort == ""){
//             regedit("regWriteStr", 'BACKUP', 'FtpPort', "0");
//             FtpPort = "0";
//         }


//         FtpUsername = regedit("regReadStr", 'BACKUP', 'FtpUsername');
//         if(FtpUsername == ""){
//             MessageBox("Potrebno je podesiti FTP username u ini datoteci.");
//             regedit("regWriteStr", 'BACKUP', 'FtpUsername', "");
//             Cursor("dflt");
//             quit;
//         }
//         //decrypt
//         FtpUsername = Decryptstr("setwofish", FtpUsername, "12345");
        
//         FtpPassword = regedit("regReadStr", 'BACKUP', 'FtpPassword');
//         if(FtpPassword == ""){
//             MessageBox("Potrebno je podesiti FTP password u ini datoteci.");
//             regedit("regWriteStr", 'BACKUP', 'FtpPassword', "");
//             Cursor("dflt");
//             quit;
//         }
//         //decrypt
//         FtpPassword = Decryptstr("setwofish", FtpPassword, "12345");

//         regedit("regClose");
//     }


//     if(checkboxZakaziArhiviranje == true){
//         satiString = string(zakazanoSati);
//         minutaString = string(zakazanoMinuta);
//         if(satiString.length < 2){
//             satiString = "0" + satiString;
//         }
//         if(minutaString.length < 2){
//             minutaString = "0" + minutaString;
//         }
//         zakazanoTime = satiString + ":" + minutaString + ":00";
        
//         ScheduleFunction(zakazanoTime, "PokreniAsync");
        
//         zakazano = true;

//         if(!regedit("regOpen", winxIniPath, "rtFile")){
//             MessageBox("Datoteka " + winxIniPath + " nije dostupna.");
//             Cursor("dflt");
//             quit;
//         }
//         regedit("regWriteStr", 'BACKUP', 'Zakazano', string(zakazano));
//         regedit("regWriteStr", 'BACKUP', 'ZakazanoSati', string(zakazanoSati));
//         regedit("regWriteStr", 'BACKUP', 'ZakazanoMinuta', string(zakazanoMinuta));
//         regedit("regClose");

//         SetWidgetOptions("StatusLabel", "Content", "");
//         SetWidgetOptions("StatusLabel2", "Content", "Sljedeće arhiviranje zakazano u " + zakazanoTime);
//     }
//     else{
//         PokreniAsync();
//     }
// }



// function nbSati@textChange(){
//     // if(checkboxZakaziArhiviranje == true){
//     //     UpdateTimer();
//     // }
// }

// function nbMinuta@textChange(){
//     // if(checkboxZakaziArhiviranje == true){
//     //     UpdateTimer();
//     // }
// }


// function PokreniAsync(){
//     AsyncCall("Pokreni", "Gotovo");
// }

// function Pokreni(){

//     isRunning = true;
//     hasErrors = false;

//     RunOnMain("SetWidgetsBackupStart");


//     //clear log
//     for(i = 0; i < logCount; i++){
//         log[i] = "";
//     }
//     logCount = 0;

//     backupDateSQL = Now("yyyy-MM-dd");
//     backupTimeSQL = Now("HH:mm:ss");
//     // backupDateShort = substring(backupDateSQL, 0, 4) + substring(backupDateSQL, 5, 2) + substring(backupDateSQL, 8, 2);
//     // backupTimeShort = substring(backupTimeSQL, 0, 2) + substring(backupTimeSQL, 3, 2) + substring(backupTimeSQL, 6, 2);
//     backupDateShort = strReplace(backupDateSQL, "-", "");
//     backupTimeShort = strReplace(backupTimeSQL, ":", "");

//     for(i = 0; i < actElem1; i++){
//         logAdd("");
//         logAdd("----- Arhiviranje baze " + arrayNazivBaze[i] + "(" + arrayNazivFirme[i] + " - " + arrayPoslovnaGodina[i] + ")" + " -----");
//         if(!CreateDBBackup(arrayNazivBaze[i], arrayNazivFirme[i], arrayPoslovnaGodina[i], i)){
//             hasErrors = true;
//             continue;
//         }

//         if(!MoveBackupFileLocally(BackupFilenames[i], arrayNazivBaze[i])){
//             hasErrors = true;
//             continue;
//         }       

//         localZipFile = substring(localBakFile, 0, localBakFile.length - 4) + ".zip";
//         if(!ZipFile(localBakFile, localZipFile)){
//             logAdd(arrayNazivBaze[i] + ": GREŠKA pri kreiranju .zip datoteke");
//             hasErrors = true;
//             continue;
//         }
//         else{
//             logAdd(arrayNazivBaze[i] + ": Kreirana .zip datoteka");
//             try{
//                 Delete(localBakFile);
//                 logAdd(arrayNazivBaze[i] + ": .bak datoteka obrisana");
//             }catch(exc){
//                 logAdd(arrayNazivBaze[i] + ": GREŠKA brisanja .bak datoteke");
//                 hasErrors = true;
//             }
//         }

//         if(ftp){
//             //ftp
//             if(!UploadZipFile(substring(localBakFilename, 0, localBakFilename.length - 4) + ".zip", arrayNazivBaze[i])){
//                 hasErrors = true;
//                 continue;
//             }
//         }
//         else{
//             //local
//             if(!MoveZipFileToFinal(substring(localBakFilename, 0, localBakFilename.length - 4) + ".zip", arrayNazivBaze[i])){
//                 hasErrors = true;
//                 continue;
//             }
//         }
//     }

//     SendEmail();

//     //RunOnMain("SetDflt");
//     if(hasErrors){
//         // MessageBox("Arhiviranje dovršeno s greškama.");
//         RunOnMain("SetWidgetsBackupErrors");
//     }
//     else{
//         //MessageBox("Arhiviranje uspješno dovršeno.");
//         RunOnMain("SetWidgetsBackupOk");
//     }
    
//     isRunning = false;
//     hasErrors = false;
// }



// function SetWidgetsBackupStart(){
//     //SetWidgetOptions("btnPokreni", "Content", "Prekini arhiviranje");
//     SetWidgetOptions("StatusLabel", "Content", "Arhiviranje u tijeku...");
//     SetWidgetOptions("StatusLabel2", "Content", "");
    
//     SetWidgetOptions("cbZakaziArhiviranje", "IsEnabled", "false");
    
//     // SetWidgetOptions("nbSati", "IsEnabled", "false");
//     // SetWidgetOptions("nbMinuta", "IsEnabled", "false");
//     Cursor("wait");
// }

// function SetWidgetsBackupErrors(){
//     SetWidgetOptions("StatusLabel", "Content", "Arhiviranje dovršeno s greškama!");
//     SetWidgetOptions("cbZakaziArhiviranje", "IsEnabled", "true");
//     if(zakazano){
//         SetWidgetOptions("StatusLabel2", "Content", "Sljedeće arhiviranje zakazano u " + zakazanoTime);
//     }
//     // SetWidgetOptions("nbSati", "IsEnabled", "true");
//     // SetWidgetOptions("nbMinuta", "IsEnabled", "true");
//     Cursor("dflt");
// }

// function SetWidgetsBackupOk(){
//     SetWidgetOptions("StatusLabel", "Content", "Arhiviranje uspješno dovršeno");
//     SetWidgetOptions("cbZakaziArhiviranje", "IsEnabled", "true");
//     if(zakazano){
//         SetWidgetOptions("StatusLabel2", "Content", "Sljedeće arhiviranje zakazano u " + zakazanoTime);
//     }
//     // SetWidgetOptions("nbSati", "IsEnabled", "true");
//     // SetWidgetOptions("nbMinuta", "IsEnabled", "true");
//     Cursor("dflt");
// }


// function Gotovo(){
// }





//-- LOG ------------------------------------------------

function LogAdd(text){
    log[logCount] = Now("HH:mm:ss") + " - " + strTrim(text);
    logCount++;
}

function FormatLog(){
    logFinal = "";

    // if(hasErrors){
    //     logFinal += "Slanje cjenika dovršeno s greškama!\n";
    // }
    // else{
    //     logFinal += "Slanje cjenika uspješno dovršeno.\n";
    // }

    for(i = 0; i < logCount; i++){
        logFinal += log[i] + "\n";
    }
}

function SaveLog(){
    MAKE_DIR(CSV_DIRECTORY + "Logs\\");
    SaveFile(logFinal, CSV_DIRECTORY + "Logs\\" + Now("yyyy-MM-dd") + "_" + Now("HH-mm-ss") + "_log.txt");
}


//-- EMAIL --------------------------------------------------------------

function SendEmail(){
    
    // EmailSubject = "Upload cjenika (NOW("yyyy-MM-dd HH:mm:ss")) za " + IME_TRGOVINE;
    EmailSubject = "Test 1 - cjenik";

    try{
        ok  = EMAIL("emlSendMsg", logFinal, "", "", EMAIL_SERVER, EMAIL_PASSWORD, EMAIL_USERNAME, EMAIL_SENDR_ADD, EMAIL_SENDR_NME, EMAIL_DEST_ADD, EmailSubject);   
        //MessageBox(ok);
    }catch(ex){
        logFinal += "\n" + "GREŠKA pri slanju e-maila: " + ex;
    }
}

// //-----------------------------------------------------
